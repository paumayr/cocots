/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/


/// <reference path="ParserGen.ts" />
/// <reference path="Util.ts" />
/// <reference path="DFA.ts" />
/// <reference path="Tab.ts" />
/// <reference path="Scanner.ts" />

module at.jku.ssw.coco {



export class Parser {
	public static _EOF : number = 0;
	public static _ident : number = 1;
	public static _number : number = 2;
	public static _string : number = 3;
	public static _badString : number = 4;
	public static _char : number = 5;
	public static maxT : number = 41;
	public static _ddtSym : number = 42;
	public static _optionSym : number = 43;

	static T : bool = true;
	static x : bool = false;
	static minErrDist : number = 2;
	
	public scanner : Scanner;
	public errors : Errors;

	public t : Token;    // last recognized token
	public la : Token;   // lookahead token
	public errDist = Parser.minErrDist;

static get id() : number { return 0; }
	static get str() : number { return 1; }
	
	public trace : TextWriter ;    // other Coco objects referenced in this ATG
	public tab : Tab;
	public dfa : DFA;
	public pgen : ParserGen;

	genScanner : bool;
	tokenString : string;         // used in declarations of literal tokens
	static get noString(): string { return "-none-"; } // used in declarations of literal tokens

/*-------------------------------------------------------------------------*/



	constructor(scanner : Scanner) 
	{
		this.scanner = scanner;
		this.errors = new Errors();
	}

	SynErr (n : number)
	{
		if (this.errDist >= Parser.minErrDist)
		{
			this.errors.SynErrPositioned(this.la.line, this.la.col, n);
		}

		this.errDist = 0;
	}

	SemErr (msg : string)
	{
		if (this.errDist >= Parser.minErrDist)
		{
			this.errors.SemErrPositioned(this.t.line, this.t.col, msg);
		}

		this.errDist = 0;
	}
	
	Get ()
	{
		for (;;)
		{
			this.t = this.la;
			this.la = this.scanner.Scan();
			if (this.la.kind <= Parser.maxT) 
			{ 
				this.errDist++; 
				break; 
			}
				if (this.la.kind == 42) {
				this.tab.SetDDT(this.la.val); 
				}
				if (this.la.kind == 43) {
				this.tab.SetOption(this.la.val); 
				}

			this.la = this.t;
		}
	}
	
	Expect (n : number) {
		if (this.la.kind == n)
		{
			this.Get(); 
		}
		else
		{ 
			this.SynErr(n);
		}
	}
	
	StartOf (s : number) : bool {
		return Parser.stateset[s][this.la.kind];
	}
	
	ExpectWeak (n : number, follow : number) {
		if (this.la.kind == n) this.Get();
		else {
			this.SynErr(n);
			while (!this.StartOf(follow)) this.Get();
		}
	}


	WeakSeparator(n : number, syFol : number, repFol : number) : bool {
		var kind = this.la.kind;
		if (kind == n) {this.Get(); return true;}
		else if (this.StartOf(repFol)) {return false;}
		else {
			this.SynErr(n);
			while (!(Parser.stateset[syFol, kind] || Parser.stateset[repFol, kind] || Parser.stateset[0, kind])) {
				this.Get();
				kind = this.la.kind;
			}
			return this.StartOf(syFol);
		}
	}

	
	Coco() {		var sym : Symbol; var g : Graph; var g1 : Graph; var g2 : Graph; var gramName : string; var s : CharSet; var beg : number;var line : number; 
		if (this.StartOf(1)) {
			this.Get();
			beg = this.t.pos; line = this.t.line; 
			while (this.StartOf(1)) {
				this.Get();
			}
			this.pgen.usingPos = new Position(beg, this.la.pos, 0, line); 
		}
		this.Expect(6);
		this.genScanner = true; 
		this.tab.ignored = new CharSet(); 
		this.Expect(1);
		gramName = this.t.val;
		beg = this.la.pos; line = this.la.line;
		
		while (this.StartOf(2)) {
			this.Get();
		}
		this.tab.semDeclPos = new Position(beg, this.la.pos, 0, line); 
		if (this.la.kind == 7) {
			this.Get();
			this.dfa.ignoreCase = true; 
		}
		if (this.la.kind == 8) {
			this.Get();
			while (this.la.kind == 1) {
				this.SetDecl();
			}
		}
		if (this.la.kind == 9) {
			this.Get();
			while (this.la.kind == 1 || this.la.kind == 3 || this.la.kind == 5) {
				this.TokenDecl({ typ : Node.t });
			}
		}
		if (this.la.kind == 10) {
			this.Get();
			while (this.la.kind == 1 || this.la.kind == 3 || this.la.kind == 5) {
				this.TokenDecl({ typ : Node.pr });
			}
		}
		while (this.la.kind == 11) {
			this.Get();
			var nested = false; 
			var tokenexprg1 : { g : Graph } = { g : null }; var tokenexprg2 : { g : Graph } = { g : null }; 
			this.Expect(12);
			this.TokenExpr(tokenexprg1);
			g1 = tokenexprg1.g; 
			this.Expect(13);
			this.TokenExpr(tokenexprg2);
			g2 = tokenexprg2.g; 
			if (this.la.kind == 14) {
				this.Get();
				nested = true; 
			}
			this.dfa.NewComment(g1.l, g2.l, nested); 
		}
		while (this.la.kind == 15) {
			var sets : { s: CharSet} = { s : null }; 
			this.Get();
			this.Set(sets);
			s = sets.s; this.tab.ignored.Or(s); 
		}
		while (!(this.la.kind == 0 || this.la.kind == 16)) {this.SynErr(42); this.Get();}
		this.Expect(16);
		if (this.genScanner) this.dfa.MakeDeterministic();
		this.tab.DeleteNodes();
		
		while (this.la.kind == 1) {
			this.Get();
			sym = this.tab.FindSym(this.t.val);
			var undef = sym == null;
			if (undef) sym = this.tab.NewSym(Node.nt, this.t.val, this.t.line);
			else {
			 if (sym.typ == Node.nt) {
			   if (sym.graph != null) this.SemErr("name declared twice");
			 } else { 
			   this.SemErr("this symbol kind not allowed on left side of production");
			 }
			 sym.line = this.t.line;
			}
			var noAttrs : bool = sym.attrPos == null;
			sym.attrPos = null;
			
			if (this.la.kind == 24 || this.la.kind == 26) {
				var retsym : { sym : Symbol } = { sym : sym }; 
				this.AttrDecl(retsym);
			}
			sym = retsym.sym;
			if (!undef) {
			 if (noAttrs != (sym.attrPos == null)) {
			   this.SemErr("attribute mismatch between declaration and use of this symbol");
			}
			}
			
			if (this.la.kind == 39) {
				var retSemPos : { pos : Position } = { pos : null}; 
				this.SemText(retSemPos);
				sym.semPos = retSemPos.pos; 
			}
			this.ExpectWeak(17, 3);
			var expressionret : { g : Graph } = { g : null }; 
			this.Expression(expressionret);
			g = expressionret.g;
			sym.graph = g.l;
			this.tab.Finish(g);
			
			this.ExpectWeak(18, 4);
		}
		this.Expect(19);
		this.Expect(1);
		if (gramName != this.t.val) {
		 this.SemErr("name does not match grammar name");
		 this.tab.gramSy = this.tab.FindSym(gramName);
		}
		if (this.tab.gramSy == null) {
		 this.SemErr("missing production for grammar name");
		} else {
		 sym = this.tab.gramSy;
		 if (sym.attrPos != null) {
		   this.SemErr("grammar symbol must not have attributes");
		 }
		}
		this.tab.noSym = this.tab.NewSym(Node.t, "???", 0); // noSym gets highest number
		this.tab.SetupAnys();
		this.tab.RenumberPragmas();
		if (this.tab.ddt[2]) {
		  this.tab.PrintNodes();
		}
		if (this.errors.count == 0) {
		 Console.prototype.log("checking");
		 this.tab.CompSymbolSets();
		 if (this.tab.ddt[7]) { this.tab.XRef(); }
		 if (this.tab.GrammarOk()) {
		   Console.prototype.log("parser");
		   this.pgen.WriteParser();
		   if (this.genScanner) {
		     Console.prototype.log(" + scanner");
		     this.dfa.WriteScanner();
		     if (this.tab.ddt[0]) { this.dfa.PrintStates(); }
		   }
		   Console.prototype.log(" generated");
		   if (this.tab.ddt[8]) { this.pgen.WriteStatistics(); }
		 }
		}
		if (this.tab.ddt[6]) { this.tab.PrintSymbolTable(); }
		
		this.Expect(18);
	}
	SetDecl() {		var s : CharSet; 
		this.Expect(1);
		var name = this.t.val;
		var c = this.tab.FindCharClass(name);
		if (c != null) { this.SemErr("name declared twice"); }
		
		this.Expect(17);
		var rets : { s: CharSet } = { s : null }; 
		this.Set(rets);
		if (rets.s.Elements() == 0) { this.SemErr("character set must not be empty"); }
		 this.tab.NewCharClass(name, rets.s);
		
		this.Expect(18);
	}
	TokenDecl(ret : {typ : number;}) {
		var symret : { name : string; kind : number } = { name : null, kind : null};
		var sym : Symbol; var g : Graph; 
		this.Sym(symret);
		sym = this.tab.FindSym(symret.name);
		if (sym != null) { this.SemErr("name declared twice"); }
		else {
		 sym = this.tab.NewSym(ret.typ, symret.name, this.t.line);
		 sym.tokenKind = Symbol.fixedToken;
		}
		this.tokenString = null;
		
		while (!(this.StartOf(5))) {this.SynErr(43); this.Get();}
		if (this.la.kind == 17) {
			var gres : { g: Graph } = { g : g };  
			this.Get();
			this.TokenExpr(gres);
			this.Expect(18);
			if (symret.kind == Parser.str) { this.SemErr("a literal must not be declared with a structure"); }
			this.tab.Finish(g);
			if (this.tokenString == null || this.tokenString == Parser.noString) {
			 this.dfa.ConvertToStates(g.l, sym);
			} else { // TokenExpr is a single string
			 if (this.tab.literals[this.tokenString] != null) {
			   this.SemErr("token string declared twice");
			 }
			 this.tab.literals[this.tokenString] = sym;
			 this.dfa.MatchLiteral(this.tokenString, sym);
			}
			
		} else if (this.StartOf(6)) {
			if (symret.kind == Parser.id) { this.genScanner = false; }
			else { this.dfa.MatchLiteral(sym.name, sym); }
			
		} else this.SynErr(44);
		if (this.la.kind == 39) {
			var retSemPos : { pos : Position } = { pos : null }; 
			this.SemText(retSemPos);
			sym.semPos = retSemPos.pos;
			if (ret.typ != Node.pr) { this.SemErr("semantic action not allowed here"); } 
		}
	}
	TokenExpr(ret : {g : Graph;}) {
		var g2 : Graph; 
		var tokentermg : { g : Graph } = { g : null }; 
		this.TokenTerm(tokentermg);
		ret.g = tokentermg.g; var first = true; 
		while (this.WeakSeparator(28,7,8) ) {
			this.TokenTerm(tokentermg);
			g2 = tokentermg.g;
			if (first) { this.tab.MakeFirstAlt(ret.g); first = false; }
			this.tab.MakeAlternative(ret.g, g2);
			
		}
	}
	Set(ret : {s : CharSet;}) {
		var rets2 : { s: CharSet} = { s : null }; 
		this.SimSet(ret);
		while (this.la.kind == 20 || this.la.kind == 21) {
			if (this.la.kind == 20) {
				this.Get();
				this.SimSet(rets2);
				ret.s.Or(rets2.s); 
			} else {
				this.Get();
				this.SimSet(rets2);
				ret.s.Subtract(rets2.s); 
			}
		}
	}
	AttrDecl(ret : {sym : Symbol;}) {
		if (this.la.kind == 24) {
			this.Get();
			var beg = this.la.pos; var col = this.la.col; var line = this.la.line; 
			while (this.StartOf(9)) {
				if (this.StartOf(10)) {
					this.Get();
				} else {
					this.Get();
					this.SemErr("bad string in attributes"); 
				}
			}
			this.Expect(25);
			if (this.t.pos > beg) {
			 ret.sym.attrPos = new Position(beg, this.t.pos, col, line); 
			} 
			
		} else if (this.la.kind == 26) {
			this.Get();
			var beg = this.la.pos; var col = this.la.col; var line = this.la.line; 
			while (this.StartOf(11)) {
				if (this.StartOf(12)) {
					this.Get();
				} else {
					this.Get();
					this.SemErr("bad string in attributes"); 
				}
			}
			this.Expect(27);
			if (this.t.pos > beg) {
			 ret.sym.attrPos = new Position(beg, this.t.pos, col, line); 
			} 
			
		} else this.SynErr(45);
	}
	SemText(ret : {pos : Position;}) {
		this.Expect(39);
		var beg = this.la.pos; var col = this.la.col; var line = this.la.line; 
		while (this.StartOf(13)) {
			if (this.StartOf(14)) {
				this.Get();
			} else if (this.la.kind == 4) {
				this.Get();
				this.SemErr("bad string in semantic action"); 
			} else {
				this.Get();
				this.SemErr("missing end of previous semantic action"); 
			}
		}
		this.Expect(40);
		ret.pos = new Position(beg, this.t.pos, col, line); 
	}
	Expression(ret : {g : Graph;}) {
		var term1 : { g : Graph } = { g : null }; 
		this.Term(term1);
		ret.g = term1.g; var first = true; 
		while (this.WeakSeparator(28,15,16) ) {
			var term2 : { g : Graph } = { g : null }; 
			this.Term(term2);
			if (first) { this.tab.MakeFirstAlt(ret.g); first = false; }
			this.tab.MakeAlternative(ret.g, term2.g);
			
		}
	}
	SimSet(ret : {s : CharSet;}) {
		var n1 : number; var n2 : number; 
		ret.s = new CharSet(); 
		if (this.la.kind == 1) {
			this.Get();
			var c = this.tab.FindCharClass(this.t.val);
			if (c == null) { this.SemErr("undefined name"); } else { ret.s.Or(c.set); }
			
		} else if (this.la.kind == 3) {
			this.Get();
			var name = this.t.val;
			name = this.tab.Unescape(name.substring(1, name.length-2));
			for (var i = 0; i < name.length; i++)
			{
			var ch = name.charAt(i);
			 if (this.dfa.ignoreCase) { ret.s.Set(ch.toLowerCase().charCodeAt(0)); }
			 else { ret.s.Set(ch.charCodeAt(0)); }
			}  
		} else if (this.la.kind == 5) {
			var n1ret : { n : number } = { n : null }; 
			this.Char(n1ret);
			ret.s.Set(n1ret.n); 
			if (this.la.kind == 22) {
				var n2ret : { n : number } = { n : null }; 
				this.Get();
				this.Char(n2ret);
				for (var i = n1ret.n; i <= n2ret.n; i++) { ret.s.Set(i); } 
			}
		} else if (this.la.kind == 23) {
			this.Get();
			ret.s = new CharSet(); ret.s.Fill(); 
		} else this.SynErr(46);
	}
	Char(ret : {n : number;}) {
		this.Expect(5);
		var name = this.t.val; ret.n = '\0'.charCodeAt(0);
		name = this.tab.Unescape(name.substring(1, name.length-2));
		if (name.length == 1) { ret.n = name[0]; }
		else { this.SemErr("unacceptable character value"); }
		if (this.dfa.ignoreCase && ret.n >= 'A'.charCodeAt(0) && ret.n <= 'Z'.charCodeAt(0)) ret.n = String.fromCharCode(ret.n).toUpperCase().charCodeAt(0);
		
	}
	Sym(ret : {name : string; kind : number;}) {
		ret.name = "???"; ret.kind = Parser.id; 
		if (this.la.kind == 1) {
			this.Get();
			ret.kind = Parser.id; ret.name = this.t.val; 
		} else if (this.la.kind == 3 || this.la.kind == 5) {
			if (this.la.kind == 3) {
				this.Get();
				ret.name = this.t.val; 
			} else {
				this.Get();
				ret.name = "\"" + this.t.val.substring(1, this.t.val.length-2) + "\""; 
			}
			ret.kind = Parser.str;
			if (this.dfa.ignoreCase) ret.name = ret.name.toLowerCase();
			if (ret.name.indexOf(' ') >= 0)
			 this.SemErr("literal tokens must not contain blanks"); 
		} else this.SynErr(47);
	}
	Term(ret : {g : Graph;}) {
		var g2 : Graph; var rslv : Node = null; ret.g = null; 
		if (this.StartOf(17)) {
			if (this.la.kind == 37) {
				rslv = this.tab.NewNode(Node.rslv, null, this.la.line);
				var rslvpos : { pos : Position } = { pos : null }; 
				
				this.Resolver(rslvpos);
				rslv.pos = rslvpos.pos; ret.g = new Graph(rslv, rslv); 
			}
			var factorg2 : { g : Graph } = { g : null }; 
			this.Factor(factorg2);
			g2 = factorg2.g;
			if (rslv != null) this.tab.MakeSequence(ret.g, g2);
			else ret.g = g2;
			
			while (this.StartOf(18)) {
				this.Factor(factorg2);
				g2 = factorg2.g; this.tab.MakeSequence(ret.g, g2); 
			}
		} else if (this.StartOf(19)) {
			var singleNode = this.tab.NewNode(Node.eps, null, 0);
			ret.g = new Graph(singleNode, singleNode); 
		} else this.SynErr(48);
		if (ret.g == null) { // invalid start of Term
		 var singleNode = this.tab.NewNode(Node.eps, null, 0);
		 ret.g = new Graph(singleNode, singleNode);
		}
		
	}
	Resolver(ret : {pos : Position;}) {
		this.Expect(37);
		this.Expect(30);
		var beg = this.la.pos; var col = this.la.col; var line = this.la.line; 
		this.Condition();
		ret.pos = new Position(beg, this.t.pos, col, line); 
	}
	Factor(ret : {g : Graph;}) {
		var pos : Position; var weak : bool = false; 
		ret.g = null;
		
		switch (this.la.kind) {
		case 1: case 3: case 5: case 29: {
			if (this.la.kind == 29) {
				this.Get();
				weak = true; 
			}
			var symret : { name : string; kind : number } = { name : null, kind : null }; 
			this.Sym(symret);
			var sym = this.tab.FindSym(symret.name);
			if (sym == null && symret.kind == Parser.str)
			 sym = this.tab.literals.get(symret.name);
			var undef = sym == null;
			if (undef) {
			 if (symret.kind == Parser.id) {
			   sym = this.tab.NewSym(Node.nt, symret.name, 0);  // forward nt
			 } else if (this.genScanner) { 
			   sym = this.tab.NewSym(Node.t, symret.name, this.t.line);
			   this.dfa.MatchLiteral(sym.name, sym);
			 } else {  // undefined string in production
			   this.SemErr("undefined string in production");
			   sym = this.tab.eofSy;  // dummy
			 }
			}
			var typ = sym.typ;
			if (typ != Node.t && typ != Node.nt) {
			 this.SemErr("this symbol kind is not allowed in a production");
			}
			if (weak) {
			 if (typ == Node.t) { typ = Node.wt; }
			 else { this.SemErr("only terminals may be weak"); }
			}
			var p = this.tab.NewNode(typ, sym, this.t.line);
			ret.g = new Graph(p, p);
			
			if (this.la.kind == 24 || this.la.kind == 26) {
				var attrp = { p : p }; 
				this.Attribs(attrp);
				if (symret.kind != Parser.id) { this.SemErr("a literal must not have attributes"); } 
			}
			if (undef) {
			 sym.attrPos = p.pos;  // dummy
			} else if ((p.pos == null) != (sym.attrPos == null)) {
			 this.SemErr("attribute mismatch between declaration and use of this symbol");
			}
			
			break;
		}
		case 30: {
			this.Get();
			this.Expression(ret);
			this.Expect(31);
			break;
		}
		case 32: {
			this.Get();
			this.Expression(ret);
			this.Expect(33);
			this.tab.MakeOption(ret.g); 
			break;
		}
		case 34: {
			this.Get();
			this.Expression(ret);
			this.Expect(35);
			this.tab.MakeIteration(ret.g); 
			break;
		}
		case 39: {
			var retSemPos : { pos : Position } = { pos : null }; 
			this.SemText(retSemPos);
			pos = retSemPos.pos;
			var p = this.tab.NewNode(Node.sem, null, 0);
			p.pos = pos;
			ret.g = new Graph(p, p);
			
			break;
		}
		case 23: {
			this.Get();
			var p = this.tab.NewNode(Node.any, null, 0);  // p.set is set in this.tab.SetupAnys
			ret.g = new Graph(p, p);
			
			break;
		}
		case 36: {
			this.Get();
			var p = this.tab.NewNode(Node.sync, null, 0);
			ret.g = new Graph(p, p);
			
			break;
		}
		default: this.SynErr(49); break;
		}
		if (ret.g == null) {// invalid start of Factor
		 var nullnode = this.tab.NewNode(Node.eps, null, 0);
		 ret.g = new Graph(nullnode, nullnode);
		}
	}
	Attribs(ret : {p : Node;}) {
		if (this.la.kind == 24) {
			this.Get();
			var beg = this.la.pos; var col = this.la.col; var line = this.la.line; 
			while (this.StartOf(9)) {
				if (this.StartOf(10)) {
					this.Get();
				} else {
					this.Get();
					this.SemErr("bad string in attributes"); 
				}
			}
			this.Expect(25);
			if (this.t.pos > beg) ret.p.pos = new Position(beg, this.t.pos, col, line); 
		} else if (this.la.kind == 26) {
			this.Get();
			var beg = this.la.pos; var col = this.la.col; var line = this.la.line; 
			while (this.StartOf(11)) {
				if (this.StartOf(12)) {
					this.Get();
				} else {
					this.Get();
					this.SemErr("bad string in attributes"); 
				}
			}
			this.Expect(27);
			if (this.t.pos > beg) ret.p.pos = new Position(beg, this.t.pos, col, line); 
		} else this.SynErr(50);
	}
	Condition() {		while (this.StartOf(20)) {
			if (this.la.kind == 30) {
				this.Get();
				this.Condition();
			} else {
				this.Get();
			}
		}
		this.Expect(31);
	}
	TokenTerm(ret : {g: Graph;}) {
		var g2 : Graph; 
		var tokenfactorg : { g : Graph } = { g : null}; 
		this.TokenFactor(tokenfactorg);
		ret.g = tokenfactorg.g; 
		while (this.StartOf(7)) {
			this.TokenFactor(tokenfactorg);
			g2 = tokenfactorg.g; 
			this.tab.MakeSequence(ret.g, g2); 
		}
		if (this.la.kind == 38) {
			this.Get();
			this.Expect(30);
			this.TokenExpr(tokenfactorg);
			g2 = tokenfactorg.g; 
			this.tab.SetContextTrans(g2.l); this.dfa.hasCtxMoves = true;
			this.tab.MakeSequence(ret.g, g2); 
			this.Expect(31);
		}
	}
	TokenFactor(ret : {g : Graph;}) {
		
		ret.g = null; 
		if (this.la.kind == 1 || this.la.kind == 3 || this.la.kind == 5) {
			var sym : { name : string; kind : number } = { name : "", kind : -1 }; 
			this.Sym(sym);
			if (sym.kind == Parser.id) {
			 var c = this.tab.FindCharClass(sym.name);
			 if (c == null) {
			   this.SemErr("undefined name");
			   c = this.tab.NewCharClass(sym.name, new CharSet());
			 }
			 var p = this.tab.NewNode(Node.clas, null, 0); 
			 p.val = c.n;
			 ret.g = new Graph(p, p);
			 this.tokenString = Parser.noString;
			} else { // str
			 ret.g = this.tab.StrToGraph(sym.name);
			 if (this.tokenString == null) this.tokenString = sym.name;
			 else this.tokenString = Parser.noString;
			}
			
		} else if (this.la.kind == 30) {
			var tokenexpr : { g: Graph} = {g : null}; 
			this.Get();
			this.TokenExpr(tokenexpr);
			this.Expect(31);
			ret.g = tokenexpr.g; 
		} else if (this.la.kind == 32) {
			this.Get();
			this.TokenExpr(tokenexpr);
			this.Expect(33);
			ret.g = tokenexpr.g; this.tab.MakeOption(ret.g); this.tokenString = Parser.noString; 
		} else if (this.la.kind == 34) {
			this.Get();
			this.TokenExpr(tokenexpr);
			this.Expect(35);
			ret.g = tokenexpr.g; this.tab.MakeIteration(ret.g); this.tokenString = Parser.noString; 
		} else this.SynErr(51);
		if (ret.g == null) { // invalid start of TokenFactor
		var nullnode = this.tab.NewNode(Node.eps, null, 0);
		ret.g = new Graph(nullnode, nullnode); 
		} 
	}


	public Parse() {
		this.la = new Token();
		this.la.val = "";		
		this.Get();
		this.Coco();
		this.Expect(0);

	}
	
	static stateset : bool[][] = [
		[true,true,false,true, false,true,false,false, false,false,true,true, false,false,false,true, true,true,false,false, false,false,false,false, false,false,false,false, false,false,false,false, false,false,false,false, false,false,false,true, false,false,false],
		[false,true,true,true, true,true,false,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,false],
		[false,true,true,true, true,true,true,false, false,false,false,false, true,true,true,false, false,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,false],
		[true,true,false,true, false,true,false,false, false,false,true,true, false,false,false,true, true,true,true,false, false,false,false,true, false,false,false,false, true,true,true,false, true,false,true,false, true,true,false,true, false,false,false],
		[true,true,false,true, false,true,false,false, false,false,true,true, false,false,false,true, true,true,false,true, false,false,false,false, false,false,false,false, false,false,false,false, false,false,false,false, false,false,false,true, false,false,false],
		[true,true,false,true, false,true,false,false, false,false,true,true, false,false,false,true, true,true,false,false, false,false,false,false, false,false,false,false, false,false,false,false, false,false,false,false, false,false,false,true, false,false,false],
		[false,true,false,true, false,true,false,false, false,false,true,true, false,false,false,true, true,false,false,false, false,false,false,false, false,false,false,false, false,false,false,false, false,false,false,false, false,false,false,true, false,false,false],
		[false,true,false,true, false,true,false,false, false,false,false,false, false,false,false,false, false,false,false,false, false,false,false,false, false,false,false,false, false,false,true,false, true,false,true,false, false,false,false,false, false,false,false],
		[false,false,false,false, false,false,false,false, false,false,false,true, false,true,true,true, true,false,true,false, false,false,false,false, false,false,false,false, false,false,false,true, false,true,false,true, false,false,false,false, false,false,false],
		[false,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,false,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,false],
		[false,true,true,true, false,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,false,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,false],
		[false,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,false, true,true,true,true, true,true,true,true, true,true,true,true, true,true,false],
		[false,true,true,true, false,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,false, true,true,true,true, true,true,true,true, true,true,true,true, true,true,false],
		[false,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, false,true,false],
		[false,true,true,true, false,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,false, false,true,false],
		[false,true,false,true, false,true,false,false, false,false,false,false, false,false,false,false, false,false,true,false, false,false,false,true, false,false,false,false, true,true,true,true, true,true,true,true, true,true,false,true, false,false,false],
		[false,false,false,false, false,false,false,false, false,false,false,false, false,false,false,false, false,false,true,false, false,false,false,false, false,false,false,false, false,false,false,true, false,true,false,true, false,false,false,false, false,false,false],
		[false,true,false,true, false,true,false,false, false,false,false,false, false,false,false,false, false,false,false,false, false,false,false,true, false,false,false,false, false,true,true,false, true,false,true,false, true,true,false,true, false,false,false],
		[false,true,false,true, false,true,false,false, false,false,false,false, false,false,false,false, false,false,false,false, false,false,false,true, false,false,false,false, false,true,true,false, true,false,true,false, true,false,false,true, false,false,false],
		[false,false,false,false, false,false,false,false, false,false,false,false, false,false,false,false, false,false,true,false, false,false,false,false, false,false,false,false, true,false,false,true, false,true,false,true, false,false,false,false, false,false,false],
		[false,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,true, true,true,true,false, true,true,true,true, true,true,true,true, true,true,false]

	];
} // end Parser

export interface ErrorStream
{
	WriteFormattedLine : (errorFormat : string, line : number, column : number, message : string) => void;
	WriteLine :  (message : string) => void;

}

export class Errors {
	public count : number = 0;                                    // number of errors detected

	public errorStream : ErrorStream;

	public errMsgFormat : string;

	Errors(_errorStream : ErrorStream, _errMsgFormat : string)
	{
		this.errorStream = _errorStream;
		this.errMsgFormat = _errMsgFormat;
	}

	public SynErrPositioned (line : number, col : number, n : number) {
		var s : string;
		switch (n) {
			case 0: s = "EOF expected"; break;
			case 1: s = "ident expected"; break;
			case 2: s = "number expected"; break;
			case 3: s = "string expected"; break;
			case 4: s = "badString expected"; break;
			case 5: s = "char expected"; break;
			case 6: s = "\"COMPILER\" expected"; break;
			case 7: s = "\"IGNORECASE\" expected"; break;
			case 8: s = "\"CHARACTERS\" expected"; break;
			case 9: s = "\"TOKENS\" expected"; break;
			case 10: s = "\"PRAGMAS\" expected"; break;
			case 11: s = "\"COMMENTS\" expected"; break;
			case 12: s = "\"FROM\" expected"; break;
			case 13: s = "\"TO\" expected"; break;
			case 14: s = "\"NESTED\" expected"; break;
			case 15: s = "\"IGNORE\" expected"; break;
			case 16: s = "\"PRODUCTIONS\" expected"; break;
			case 17: s = "\"=\" expected"; break;
			case 18: s = "\".\" expected"; break;
			case 19: s = "\"END\" expected"; break;
			case 20: s = "\"+\" expected"; break;
			case 21: s = "\"-\" expected"; break;
			case 22: s = "\"..\" expected"; break;
			case 23: s = "\"ANY\" expected"; break;
			case 24: s = "\"<\" expected"; break;
			case 25: s = "\">\" expected"; break;
			case 26: s = "\"<.\" expected"; break;
			case 27: s = "\".>\" expected"; break;
			case 28: s = "\"|\" expected"; break;
			case 29: s = "\"WEAK\" expected"; break;
			case 30: s = "\"(\" expected"; break;
			case 31: s = "\")\" expected"; break;
			case 32: s = "\"[\" expected"; break;
			case 33: s = "\"]\" expected"; break;
			case 34: s = "\"{\" expected"; break;
			case 35: s = "\"}\" expected"; break;
			case 36: s = "\"SYNC\" expected"; break;
			case 37: s = "\"IF\" expected"; break;
			case 38: s = "\"CONTEXT\" expected"; break;
			case 39: s = "\"(.\" expected"; break;
			case 40: s = "\".)\" expected"; break;
			case 41: s = "??? expected"; break;
			case 42: s = "this symbol not expected in Coco"; break;
			case 43: s = "this symbol not expected in TokenDecl"; break;
			case 44: s = "invalid TokenDecl"; break;
			case 45: s = "invalid AttrDecl"; break;
			case 46: s = "invalid SimSet"; break;
			case 47: s = "invalid Sym"; break;
			case 48: s = "invalid Term"; break;
			case 49: s = "invalid Factor"; break;
			case 50: s = "invalid Attribs"; break;
			case 51: s = "invalid TokenFactor"; break;

			default: s = "error " + n; break;
		}
		this.errorStream.WriteFormattedLine(this.errMsgFormat, line, col, s);
		this.count++;
	}

	public SemErrPositioned (line : number, col : number, s : string) {
		this.errorStream.WriteFormattedLine(this.errMsgFormat, line, col, s);
		this.count++;
	}
	
	public SemErr (s : string) {
		this.errorStream.WriteLine(s);
		this.count++;
	}
	
	public WarningPositioned (line : number, col : number, s : string) {
		this.errorStream.WriteFormattedLine(this.errMsgFormat, line, col, s);
	}
	
	public Warning(s : string) {
		this.errorStream.WriteLine(s);
	}
} // Errors
}