/*-------------------------------------------------------------------------
Coco.ATG -- Attributed Grammar
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------
 compile with:
   Coco Coco.ATG -namespace at.jku.ssw.Coco
-------------------------------------------------------------------------*/
$namespace=at.jku.ssw.Coco

COMPILER Coco

	get id() : number { return 0; }
	get str() : number { return 1; }
	
	public trace : TextWriter ;    // other Coco objects referenced in this ATG
	public tab : Tab;
	public dfa : DFA;
	public pgen : ParserGen;

	genScanner : bool;
	tokenString : string;         // used in declarations of literal tokens
	noString : string = "-none-"; // used in declarations of literal tokens

/*-------------------------------------------------------------------------*/

CHARACTERS
	letter    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_".
	digit     = "0123456789".
	cr        = '\r'.
	lf        = '\n'.
	tab       = '\t'.
	stringCh  = ANY - '"' - '\\' - cr - lf.
	charCh    = ANY - '\'' - '\\' - cr - lf.
	printable = '\u0020' .. '\u007e'.
	hex       = "0123456789abcdef".

TOKENS
	ident     = letter { letter | digit }.
	number    = digit { digit }.
	string    = '"' { stringCh | '\\' printable } '"'.
	badString = '"' { stringCh | '\\' printable } (cr | lf).
	char      = '\'' ( charCh | '\\' printable { hex } ) '\''.

PRAGMAS
	ddtSym    = '$' { digit | letter }.  (. this.tab.SetDDT(this.la.val); .)

	optionSym = '$' letter { letter } '='
	            { digit | letter
	            | '-' | '.' | ':'
	            }.                       (. this.tab.SetOption(this.la.val); .)


COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

/*-------------------------------------------------------------------------*/

PRODUCTIONS

Coco                            (. var sym : Symbol; var g : Graph; var g1 : Graph; var g2 : Graph; var gramName : string; var s : CharSet; var beg : number;var line : number; .)
=
  [ // using statements
    ANY                          (. beg = this.t.pos; line = this.t.line; .)
    { ANY }                      (. this.pgen.usingPos = new Position(beg, this.la.pos, 0, line); .)
  ]

  "COMPILER"                    (. this.genScanner = true; 
                                   this.tab.ignored = new CharSet(); .) 
  ident                         (. gramName = this.t.val;
                                   beg = this.la.pos; line = this.la.line;
                                 .)
  { ANY }                       (. this.tab.semDeclPos = new Position(beg, this.la.pos, 0, line); .)
  [ "IGNORECASE"                (. this.dfa.ignoreCase = true; .) ]   /* pdt */
  [ "CHARACTERS" { SetDecl }]
  [ "TOKENS"  { TokenDecl<Node.t> }]
  [ "PRAGMAS" { TokenDecl<Node.pr> }]
  { "COMMENTS"                          (. var nested = false; .)
                                        (. var tokenexprg1 : { g : Graph } = { g : null }; var tokenexprg2 : { g : Graph } = { g : null }; .)
    "FROM" TokenExpr<tokenexprg1>       (. g1 = tokenexprg1.g; .) 
    "TO" TokenExpr<tokenexprg2>         (. g2 = tokenexprg2.g; .)
    [ "NESTED"                          (. nested = true; .)
    ]                                   (. this.dfa.NewComment(g1.l, g2.l, nested); .)
  }
  {                                     (. var sets : { s: CharSet} = { s : null }; .)
     "IGNORE" Set<sets>                 (. s = sets.s; this.tab.ignored.Or(s); .)
  }

  SYNC 
  "PRODUCTIONS"                 (. if (this.genScanner) this.dfa.MakeDeterministic();
                                   this.tab.DeleteNodes();
                                 .)
  { ident                       (. sym = this.tab.FindSym(this.t.val);
                                   var undef = sym == null;
                                   if (undef) sym = this.tab.NewSym(Node.nt, this.t.val, this.t.line);
                                   else {
                                     if (sym.typ == Node.nt) {
                                       if (sym.graph != null) this.SemErr("name declared twice");
                                     } else { 
                                       this.SemErr("this symbol kind not allowed on left side of production");
                                     }
                                     sym.line = this.t.line;
                                   }
                                   var noAttrs : bool = sym.attrPos == null;
                                   sym.attrPos = null;
                                 .)
    [ AttrDecl<sym> ]           (. if (!undef) {
                                     if (noAttrs != (sym.attrPos == null)) {
                                       this.SemErr("attribute mismatch between declaration and use of this symbol");
                                     }
                                   }
                                 .)
    [ SemText<out sym.semPos> ] WEAK
    '='
    Expression<out g>           (. sym.graph = g.l;
                                   this.tab.Finish(g);
                                 .)
                                WEAK
    '.'
  }
  "END" ident                   (. if (gramName != this.t.val) {
                                     this.SemErr("name does not match grammar name");
                                     this.tab.gramSy = this.tab.FindSym(gramName);
                                   }
                                   if (this.tab.gramSy == null) {
                                     this.SemErr("missing production for grammar name");
                                   } else {
                                     sym = this.tab.gramSy;
                                     if (sym.attrPos != null) {
                                       this.SemErr("grammar symbol must not have attributes");
                                     }
                                   }
                                   this.tab.noSym = this.tab.NewSym(Node.t, "???", 0); // noSym gets highest number
                                   this.tab.SetupAnys();
                                   this.tab.RenumberPragmas();
                                   if (this.tab.ddt[2]) {
                                      this.tab.PrintNodes();
                                   }
                                   if (this.errors.count == 0) {
                                     Console.WriteLine("checking");
                                     this.tab.CompSymbolSets();
                                     if (this.tab.ddt[7]) { this.tab.XRef(); }
                                     if (this.tab.GrammarOk()) {
                                       Console.Write("parser");
                                       this.pgen.WriteParser();
                                       if (this.genScanner) {
                                         Console.Write(" + scanner");
                                         this.dfa.WriteScanner();
                                         if (this.tab.ddt[0]) { this.dfa.PrintStates(); }
                                       }
                                       Console.WriteLine(" generated");
                                       if (this.tab.ddt[8]) { this.pgen.WriteStatistics(); }
                                     }
                                   }
                                   if (this.tab.ddt[6]) { this.tab.PrintSymbolTable(); }
                                 .)
  '.'
.

/*------------------------------------------------------------------------------------*/

SetDecl                         (. var s : CharSet; .)
=
  ident                         (. var name = this.t.val;
                                   var c = this.tab.FindCharClass(name);
                                   if (c != null) { this.SemErr("name declared twice"); }
                                 .)
  '=' Set<s>                    (. if (s.Elements() == 0) { this.SemErr("character set must not be empty"); }
                                   this.tab.NewCharClass(name, s);
                                 .)
  '.'
.

/*------------------------------------------------------------------------------------*/

Set<s : CharSet;>              (. var s2 : CharSet; .)
=
  SimSet<ret.s>
  { '+' SimSet<s2>          (. ret.s.Or(s2); .)
  | '-' SimSet<s2>          (. ret.s.Subtract(s2); .)
  }
.

/*------------------------------------------------------------------------------------*/

SimSet<s : CharSet;>            (. var n1 : number; var n2 : number; .)
=                               (. s = new CharSet(); .)
( ident                         (. var c = this.tab.FindCharClass(this.t.val);
                                   if (c == null) { this.SemErr("undefined name"); } else { s.Or(c.set); }
                                 .)
| string                        (. var name = this.t.val;
                                   name = this.tab.Unescape(name.Substring(1, name.Length-2));
                                   foreach (char ch in name) {
                                     if (this.dfa.ignoreCase) { s.Set(char.ToLower(ch)); }
                                     else { s.Set(ch); }
                                   }  .)
| Char<n1 : number;>                  (. s.Set(n1); .)
  [ ".." Char<n2>               (. for (var i = n1; i <= n2; i++) { s.Set(i); } .)
  ]
| "ANY"                         (. s = new CharSet(); s.Fill(); .)
)
.

/*--------------------------------------------------------------------------------------*/

Char<n : string;>
=
  char                          (. var name = this.t.val; n = '\0';
                                   name = this.tab.Unescape(name.Substring(1, name.Length-2));
                                   if (name.Length == 1) { n = name[0]; }
                                   else { this.SemErr("unacceptable character value"); }
                                   if (this.dfa.ignoreCase && n >= 'A' && n <= 'Z') n = n.toUpper();
                                 .)
.

/*------------------------------------------------------------------------------------*/

TokenDecl<typ : number;>         (. var name : string; var kind : number; var sym : Symbol; var g : Graph; .)
=
  Sym<name, kind>               (. sym = this.tab.FindSym(name);
                                   if (sym != null) { this.SemErr("name declared twice"); }
                                   else {
                                     sym = this.tab.NewSym(typ, name, this.t.line);
                                     sym.tokenKind = Symbol.fixedToken;
                                   }
                                   tokenString = null;
                                 .)
  SYNC
  (                             (. var gres : { g: Graph } = { g : g };  .)
	'=' TokenExpr<gres> '.'        (. if (kind == str) { this.SemErr("a literal must not be declared with a structure"); }
                                   this.tab.Finish(g);
                                   if (tokenString == null || tokenString.Equals(noString)) {
                                     this.dfa.ConvertToStates(g.l, sym);
                                   } else { // TokenExpr is a single string
                                     if (this.tab.literals[tokenString] != null) {
                                       this.SemErr("token string declared twice");
                                     }
                                     this.tab.literals[tokenString] = sym;
                                     this.dfa.MatchLiteral(tokenString, sym);
                                   }
                                 .)
  |                             (. if (kind == id) { this.genScanner = false; }
                                   else { this.dfa.MatchLiteral(sym.name, sym); }
                                 .)
  )
  [ SemText<out sym.semPos>     (. if (typ != Node.pr) { this.SemErr("semantic action not allowed here"); } .)
  ]
.

/*------------------------------------------------------------------------------------*/

AttrDecl<sym : Symbol;>
=
  '<'                           (. var beg = this.la.pos; var col = this.la.col; var line = this.la.line; .)
  { ANY
  | badString                   (. this.SemErr("bad string in attributes"); .)
  }
  '>'                           (. if (this.t.pos > beg) {
                                     sym.attrPos = new Position(beg, this.t.pos, col, line); 
                                   } 
								.)
| "<."                          (. var beg = this.la.pos; var col = this.la.col; var line = this.la.line; .)
  { ANY
  | badString                   (. this.SemErr("bad string in attributes"); .)
  }
  ".>"                          (. if (this.t.pos > beg) {
                                     sym.attrPos = new Position(beg, this.t.pos, col, line); 
                                   } 
								.)
.

/*------------------------------------------------------------------------------------*/

Expression<g : Graph;>
= 
  Term<term1>                 (. ret.g = term1.g; var first = true; .)
  {                             WEAK
    '|'
    Term<term2>                (. if (first) { this.tab.MakeFirstAlt(ret.g); first = false; }
                                   this.tab.MakeAlternative(ret.g, term2.g);
                                 .)
  }
.

/*------------------------------------------------------------------------------------*/

Term<g : Graph;>               (. var g2 : Graph; var rslv : Node = null; g = null; .)
=
( [                             (. rslv = this.tab.NewNode(Node.rslv, null, this.la.line); .)
    Resolver<rslvpos>           (. rslv.pos = rslvpos.pos; g = new Graph(rslv); .)
  ]
  Factor<factorg2>              (. g2 = factorg2.g;
                                   if (rslv != null) this.tab.MakeSequence(ret.g, ret.g2);
                                   else ret.g = g2;
                                 .)
  { Factor<factorg2>            (. g2 = factorg2.g; this.tab.MakeSequence(ret.g, ret.g2); .)
  }
|                               (. g = new Graph(this.tab.NewNode(Node.eps, null, 0)); .)
)                               (. if (g == null) { // invalid start of Term
                                     g = new Graph(this.tab.NewNode(Node.eps, null, 0));
                                   }
                                 .)
.

/*------------------------------------------------------------------------------------*/

Factor<out Graph g>             (. var name : string; var kind : number; var pos : Position; var weak : bool = false; 
                                   g = null;
                                 .)
=
( [ "WEAK"                      (. weak = true; .)
  ]
  Sym<out name, out kind>       (. var sym = this.tab.FindSym(name);
                                   if (sym == null && kind == str)
                                     sym = this.tab.literals[name] as Symbol;
                                   var undef = sym == null;
                                   if (undef) {
                                     if (kind == id) {
                                       sym = this.tab.NewSym(Node.nt, name, 0);  // forward nt
                                     } else if (this.genScanner) { 
                                       sym = this.tab.NewSym(Node.t, name, this.t.line);
                                       this.dfa.MatchLiteral(sym.name, sym);
                                     } else {  // undefined string in production
                                       this.SemErr("undefined string in production");
                                       sym = this.tab.eofSy;  // dummy
                                     }
                                   }
                                   var typ = sym.typ;
                                   if (typ != Node.t && typ != Node.nt) {
                                     this.SemErr("this symbol kind is not allowed in a production");
                                   }
                                   if (weak) {
                                     if (typ == Node.t) { typ = Node.wt; }
                                     else { this.SemErr("only terminals may be weak"); }
                                   }
                                   var p = this.tab.NewNode(typ, sym, this.t.line);
                                   g = new Graph(p);
                                 .)
  [ Attribs<p>                  (. if (kind != id) { this.SemErr("a literal must not have attributes"); } .)
  ]                             (. if (undef) {
                                     sym.attrPos = p.pos;  // dummy
                                   } else if ((p.pos == null) != (sym.attrPos == null)) {
                                     this.SemErr("attribute mismatch between declaration and use of this symbol");
                                   }
								.)
| '(' Expression<out g> ')'
| '[' Expression<out g> ']'     (. this.tab.MakeOption(g); .)
| '{' Expression<out g> '}'     (. this.tab.MakeIteration(g); .)
| SemText<out pos>              (. Node p = this.tab.NewNode(Node.sem, null, 0);
                                   p.pos = pos;
                                   g = new Graph(p);
                                 .)
| "ANY"                         (. var p = this.tab.NewNode(Node.any, null, 0);  // p.set is set in this.tab.SetupAnys
                                   g = new Graph(p);
                                 .)
| "SYNC"                        (. var p = this.tab.NewNode(Node.sync, null, 0);
                                   g = new Graph(p);
                                 .)
)                               (. if (g == null) {// invalid start of Factor
                                     g = new Graph(this.tab.NewNode(Node.eps, null, 0));
                                   }.)
.

/*------------------------------------------------------------------------------------*/

Resolver<pos : Position;>
=
  "IF" "("                       (. var beg = this.la.pos; var col = this.la.col; var line = this.la.line; .)
  Condition                      (. ret.pos = new Position(beg, this.t.pos, col, line); .)
.

/*------------------------------------------------------------------------------------*/

Condition = { "(" Condition | ANY } ")" .

/*------------------------------------------------------------------------------------*/

TokenExpr<g : Graph;>            (. var g2 : Graph; .)
=
  TokenTerm<tokentermg>         (. ret.g = tokentermg.g; var first = true; .)
  {                             WEAK
    '|'
    TokenTerm<tokentermg2>      (. g2 = tokentermg2.g;
                                   if (first) { this.tab.MakeFirstAlt(ret.g); first = false; }
                                   this.tab.MakeAlternative(ret.g, g2);
                                 .)
  }
.

/*------------------------------------------------------------------------------------*/

TokenTerm<g: Graph;>          (. var g2 : Graph; .)
=
  TokenFactor<tokenfactorg>     (. g = tokenfactorg.g; .)
  { TokenFactor<tokenfactorg2>  (. g2 = tokenfactorg2.g; 
                                   this.tab.MakeSequence(g, g2); .)
  }
  [ "CONTEXT"
    '(' TokenExpr<tokenexprg2>    (. g2 = tokenexprg2.g; 
                                     this.tab.SetContextTrans(g2.l); this.dfa.hasCtxMoves = true;
                                     this.tab.MakeSequence(g, g2); .)
    ')'
  ]
.

/*------------------------------------------------------------------------------------*/

TokenFactor<g : Graph;>        (. .)
=
                                (. ret.g = null; .)
( Sym<sym>                      (. if (sym.kind == id) {
                                     var c = this.tab.FindCharClass(sym.name);
                                     if (c == null) {
                                       this.SemErr("undefined name");
                                       c = this.tab.NewCharClass(sym.name, new CharSet());
                                     }
                                     var p = this.tab.NewNode(Node.clas, null, 0); 
                                     p.val = c.n;
                                     ret.g = new Graph(p);
                                     tokenString = noString;
                                   } else { // str
                                     ret.g = this.tab.StrToGraph(sym.name);
                                     if (tokenString == null) tokenString = sym.name;
                                     else tokenString = noString;
                                   }
                                 .)
| '(' TokenExpr<tokenexprg> ')'      (. ret.g = tokenexpr.g; .)
| '[' TokenExpr<tokenexprg> ']'      (. ret.g = tokenexpr.g; this.tab.MakeOption(g); tokenString = noString; .)
| '{' TokenExpr<tokenexprg> '}'      (. ret.g = tokenexpr.g; this.tab.MakeIteration(g); tokenString = noString; .)
)                                    (. if (ret.g == null) { // invalid start of TokenFactor
                                        ret.g = new Graph(this.tab.NewNode(Node.eps, null, 0)); 
                                   } .)
.

/*------------------------------------------------------------------------------------*/

Sym<name : string; kind : number;>
=                               (. ret.name = "???"; ret.kind = id; .)
( ident                         (. ret.kind = id; ret.name = this.t.val; .)
| (string                       (. ret.name = this.t.val; .)
  | char                        (. ret.name = "\"" + this.t.val.substring(1, t.val.Length-2) + "\""; .)
  )                             (. ret.kind = str;
                                   if (this.dfa.ignoreCase) ret.name = ret.name.ToLower();
                                   if (ret.name.IndexOf(' ') >= 0)
                                     this.SemErr("literal tokens must not contain blanks"); .)
)
.

/*------------------------------------------------------------------------------------*/

Attribs<p : Node>          // TODO: in argument!!
=
  '<'                           (. var beg = this.la.pos; var col = this.la.col; var line = this.la.line; .)
  { ANY 
  | badString                   (. this.SemErr("bad string in attributes"); .)
  }
  '>'                           (. if (this.t.pos > beg) p.pos = new Position(beg, this.t.pos, col, line); .)
| "<."                          (. var beg = this.la.pos; var col = this.la.col; var line = this.la.line; .)
  { ANY 
  | badString                   (. this.SemErr("bad string in attributes"); .)
  }
  ".>"                          (. if (this.t.pos > beg) p.pos = new Position(beg, this.t.pos, col, line); .)
.

/*------------------------------------------------------------------------------------*/

SemText<pos : Position;>
=
  "(."                          (. var beg = this.la.pos; var col = this.la.col; var line = this.la.line; .)
  { ANY
  | badString                   (. this.SemErr("bad string in semantic action"); .)
  | "(."                        (. this.SemErr("missing end of previous semantic action"); .)
  }
  ".)"                          (. ret.pos = new Position(beg, this.t.pos, col, line); .)
.

END Coco.
