/*-------------------------------------------------------------------------
ParserGen.cs -- Generation of the Recursive Descent Parser
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/

/// <reference path="Tab.ts" />
/// <reference path="Util.ts" />
/// <reference path="Parser.ts" />

module at.jku.ssw.Coco {

export class ParserGen {

	static maxTerm = 3;		// sets of size < maxTerm are enumerated
	static CR : string = '\r';
	static LF : string = '\n';
	static EOF : number = -1;

	static tErr: number = 0;			// error codes
	static altErr : number = 1;
	static syncErr : number = 2;

	public usingPos: Position; // "using" definitions from the attributed grammar

	errorNr : number;      // highest parser error number
	curSy: Symbol;     // symbol whose production is currently generated
	fram: FileStream;  // parser frame file
	gen: StreamWriter; // generated parser source file
	err: StringWriter; // generated parser error messages
	symSet = new ArrayList();

	tab: Tab;          // other Coco objects
	trace: TextWriter;
	errors: Errors;
	buffer: Buffer;

	Indent(n : number) {
		for (var i = 1; i <= n; i++) gen.Write('\t');
	}

	Overlaps(s1: BitArray, s2: BitArray): bool {
		var len = s1.Count;
		for (var i = 0; i < len; ++i) {
			if (s1[i] && s2[i]) {
				return true;
			}
		}
		return false;
	}

	// use a switch if more than 5 alternatives and none starts with a resolver
	UseSwitch(p: Node): bool {
		var s1: BitArray;
		var s2: BitArray;
		if (p.typ != Node.alt) return false;
		var nAlts : number = 0;
		s1 = new BitArray(tab.terminals.Count);
		while (p != null) {
			s2 = tab.Expected0(p.sub, curSy);
			// must not optimize with switch statement, if there are ll1 warnings
			if (Overlaps(s1, s2)) { return false; }
			s1.Or(s2);
			++nAlts;
			// must not optimize with switch-statement, if alt uses a resolver expression
			if (p.sub.typ == Node.rslv) return false;
			p = p.down;
		}
		return nAlts > 5;
	}

	CopySourcePart(pos: Position, indent : number) {
		// Copy text described by pos from atg to gen
		var ch: string;
		var i : number;
		if (pos != null) {
			buffer.Pos = pos.beg; ch = buffer.Read();
			if (tab.emitLines) {
				gen.WriteLine();
				gen.WriteLine("#line {0} \"{1}\"", pos.line, tab.srcName);
			}
			Indent(indent);
			var done = false;
			while (!done &&  buffer.Pos <= pos.end) {
				while (ch == CR || ch == LF) {  // eol is either CR or CRLF or LF
					gen.WriteLine(); Indent(indent);
					if (ch == CR) ch = buffer.Read(); // skip CR
					if (ch == LF) ch = buffer.Read(); // skip LF
					for (i = 1; i <= pos.col && (ch == ' ' || ch == '\t'); i++) {
						// skip blanks at beginning of line
						ch = buffer.Read();
					}
					if (buffer.Pos > pos.end) { done = true; break; };
				}

				if (!done) {
					gen.Write(ch);
					ch = buffer.Read();
				}
			}

			if (indent > 0) gen.WriteLine();
		}
	}

	GenErrorMsg(errTyp: number, sym: Symbol) {
		errorNr++;
		err.Write("\t\t\tcase " + errorNr + ": s = \"");
		switch (errTyp) {
			case tErr:
				if (sym.name[0] == '"') err.Write(tab.Escape(sym.name) + " expected");
				else err.Write(sym.name + " expected");
				break;
			case altErr: err.Write("invalid " + sym.name); break;
			case syncErr: err.Write("this symbol not expected in " + sym.name); break;
		}
		err.WriteLine("\"; break;");
	}

	NewCondSet(s: BitArray) : number{
		for (var i = 1; i < symSet.Count; i++) // skip symSet[0] (reserved for union of SYNC sets)
		if (Sets.Equals(s, symSet[i])) return i;
		symSet.Add(s.Clone());
		return symSet.Count - 1;
	}

	GenCond(s: BitArray, p: Node) {
		if (p.typ == Node.rslv) CopySourcePart(p.pos, 0);
		else {
			var n = Sets.Elements(s);
			if (n == 0) gen.Write("false"); // happens if an ANY set matches no symbol
			else if (n <= maxTerm)
				for (var i = 0; i < this.tab.terminals.length; i++) {
					var sym = this.tab.terminals[i];
					if (s[sym.n]) {
						gen.Write("this.la.kind == {0}", sym.n);
						--n;
						if (n > 0) gen.Write(" || ");
					}
				}
			else
				gen.Write("this.StartOf({0})", NewCondSet(s));
		}
	}

	PutCaseLabels(s: BitArray) {
		for (var i = 0; i < this.tab.terminals.length; i++) {
			var sym = this.tab.terminals[i];
			if (s[sym.n]) gen.Write("case {0}: ", sym.n);
		}
	}

	GenCode(p: Node, indent: number, isChecked: BitArray) {
		var p2: Node;
		var s1: BitArray;
		var s2: BitArray;
		while (p != null) {
			switch (p.typ) {
				case Node.nt: {
					Indent(indent);
					gen.Write("var ");
					CopySourcePart(p.pos, 0);
					gen.Write(" = ");
					gen.Write("this." + p.sym.name + "(");
					gen.WriteLine(");");
					break;
				}
				case Node.t: {
					Indent(indent);
					// assert: if isChecked[p.sym.n] is true, then isChecked contains only p.sym.n
					if (isChecked[p.sym.n]) gen.WriteLine("this.Get();");
					else gen.WriteLine("this.Expect({0});", p.sym.n);
					break;
				}
				case Node.wt: {
					Indent(indent);
					s1 = tab.Expected(p.next, curSy);
					s1.Or(tab.allSyncSets);
					gen.WriteLine("this.ExpectWeak({0}, {1});", p.sym.n, NewCondSet(s1));
					break;
				}
				case Node.any: {
					Indent(indent);
					var acc = Sets.Elements(p.set );
					if (tab.terminals.Count == (acc + 1) || (acc > 0 && Sets.Equals(p.set , isChecked))) {
						// either this ANY accepts any terminal (the + 1 = end of file), or exactly what's allowed here
						gen.WriteLine("this.Get();");
					} else {
						GenErrorMsg(altErr, curSy);
						if (acc > 0) {
							gen.Write("if ("); GenCond(p.set , p); gen.WriteLine(") this.Get(); else this.SynErr({0});", errorNr);
						} else gen.WriteLine("this.SynErr({0}); // ANY node that matches no symbol", errorNr);
					}
					break;
				}
				case Node.eps: break; // nothing
				case Node.rslv: break; // nothing
				case Node.sem: {
					CopySourcePart(p.pos, indent);
					break;
				}
				case Node.sync: {
					Indent(indent);
					GenErrorMsg(syncErr, curSy);
					s1 = (BitArray) p.set.Clone();
					gen.Write("while (!("); GenCond(s1, p); gen.Write(")) {");
					gen.Write("this.SynErr({0}); Get();", errorNr); gen.WriteLine("}");
					break;
				}
				case Node.alt: {
					s1 = tab.First(p);
					var equal = Sets.Equals(s1, isChecked);
					var useSwitch = UseSwitch(p);
					if (useSwitch) { Indent(indent); gen.WriteLine("switch (this.la.kind) {"); }
					p2 = p;
					while (p2 != null) {
						s1 = tab.Expected(p2.sub, curSy);
						Indent(indent);
						if (useSwitch) {
							PutCaseLabels(s1); gen.WriteLine("{");
						} else if (p2 == p) {
							gen.Write("if ("); GenCond(s1, p2.sub); gen.WriteLine(") {");
						} else if (p2.down == null && equal) {
							gen.WriteLine("} else {");
						} else {
							gen.Write("} else if ("); GenCond(s1, p2.sub); gen.WriteLine(") {");
						}
						GenCode(p2.sub, indent + 1, s1);
						if (useSwitch) {
							Indent(indent); gen.WriteLine("\tbreak;");
							Indent(indent); gen.WriteLine("}");
						}
						p2 = p2.down;
					}
					Indent(indent);
					if (equal) {
						gen.WriteLine("}");
					} else {
						GenErrorMsg(altErr, curSy);
						if (useSwitch) {
							gen.WriteLine("default: this.SynErr({0}); break;", errorNr);
							Indent(indent); gen.WriteLine("}");
						} else {
							gen.Write("} "); gen.WriteLine("else this.SynErr({0});", errorNr);
						}
					}
					break;
				}
				case Node.iter: {
					Indent(indent);
					p2 = p.sub;
					gen.Write("while (");
					if (p2.typ == Node.wt) {
						s1 = tab.Expected(p2.next, curSy);
						s2 = tab.Expected(p.next, curSy);
						gen.Write("this.WeakSeparator({0},{1},{2}) ", p2.sym.n, NewCondSet(s1), NewCondSet(s2));
						s1 = new BitArray(tab.terminals.Count);  // for inner structure
						if (p2.up || p2.next == null) p2 = null; else p2 = p2.next;
					} else {
						s1 = tab.First(p2);
						GenCond(s1, p2);
					}
					gen.WriteLine(") {");
					GenCode(p2, indent + 1, s1);
					Indent(indent); gen.WriteLine("}");
					break;
				}
				case Node.opt:
					s1 = tab.First(p.sub);
					Indent(indent);
					gen.Write("if ("); GenCond(s1, p.sub); gen.WriteLine(") {");
					GenCode(p.sub, indent + 1, s1);
					Indent(indent); gen.WriteLine("}");
					break;
			}
			if (p.typ != Node.eps && p.typ != Node.sem && p.typ != Node.sync)
				isChecked.SetAll(false);  // = new BitArray(tab.terminals.Count);
			if (p.up) break;
			p = p.next;
		}
	}

	GenTokens() {
		foreach(Symbol sym in tab.terminals)
		{
			if (Char.IsLetter(sym.name[0])) {
				// TODO: use const from ES6
				gen.WriteLine("\tpublic static _{0} : number = {1};", sym.name, sym.n);
			}
		}
	}

	GenPragmas() {
		foreach(Symbol sym in tab.pragmas) {
			// TODO: use const from ES6
			gen.WriteLine("\tpublic static _{0} : number = {1};", sym.name, sym.n);
		}
	}

	GenCodePragmas() {
		foreach(Symbol sym in tab.pragmas) {
			gen.WriteLine("\t\t\t\tif (this.la.kind == {0}) {{", sym.n);
			CopySourcePart(sym.semPos, 4);
			gen.WriteLine("\t\t\t\t}");
		}
	}

	GenProductions() {
		foreach(Symbol sym in tab.nonterminals) {
			curSy = sym;
			gen.Write("\t{0}() ", sym.name);
			gen.Write(" : {");
			CopySourcePart(sym.attrPos, 0);
			gen.WriteLine(" } ");
			Indent(1);
			gen.WriteLine(" { ");
			Indent(2);
			gen.Write("var ret : { ");
			CopySourcePart(sym.attrPos, 0);
			gen.WriteLine("};");
			CopySourcePart(sym.semPos, 2);
			GenCode(sym.graph, 2, new BitArray(tab.terminals.Count));
			gen.WriteLine("\t\treturn ret;");
			gen.WriteLine("\t}");
		}
	}

	InitSets() {
		for (var i = 0; i < symSet.Count; i++) {
			var s = symSet[i];
			gen.Write("\t\t[");
			var j = 0;
			foreach(Symbol sym in tab.terminals) {
				if (s[sym.n]) gen.Write("true,"); else gen.Write("false,");
				++j;
				if (j % 4 == 0) gen.Write(" ");
			}
			if (i == symSet.Count - 1) gen.WriteLine("false]"); else gen.WriteLine("false],");
		}
	}

	public WriteParser() {
		var g = new Generator(tab);
		var oldPos = buffer.Pos;  // Pos is modified by CopySourcePart
		symSet.Add(tab.allSyncSets);

		fram = g.OpenFrame("Parser.frame");
		gen = g.OpenGen("Parser.ts");
		err = new StringWriter();
		foreach(Symbol sym in tab.terminals) GenErrorMsg(tErr, sym);

		g.GenCopyright();
		g.SkipFramePart("-->begin");

		if (usingPos != null) { CopySourcePart(usingPos, 0); gen.WriteLine(); }
		g.CopyFramePart("-->namespace");
		/* AW open namespace, if it exists */
		if (tab.nsName != null && tab.nsName.Length > 0) {
			gen.WriteLine("module {0} {{", tab.nsName);
			gen.WriteLine();
		}
		g.CopyFramePart("-->constants");
		GenTokens(); /* ML 2002/09/07 write the token kinds */
		gen.WriteLine("\tpublic static maxT : number = {0};", tab.terminals.Count - 1);
		GenPragmas(); /* ML 2005/09/23 write the pragma kinds */
		g.CopyFramePart("-->declarations"); CopySourcePart(tab.semDeclPos, 0);
		g.CopyFramePart("-->pragmas"); GenCodePragmas();
		g.CopyFramePart("-->productions"); GenProductions();
		g.CopyFramePart("-->parseRoot"); gen.WriteLine("\t\tthis.{0}();", tab.gramSy.name); if (tab.checkEOF) gen.WriteLine("\t\tthis.Expect(0);");
		g.CopyFramePart("-->initialization"); InitSets();
		g.CopyFramePart("-->errors"); gen.Write(err.ToString());
		g.CopyFramePart(null);
		/* AW 2002-12-20 close namespace, if it exists */
		if (tab.nsName != null && tab.nsName.Length > 0) gen.Write("}");
		gen.Close();
		buffer.Pos = oldPos;
	}

	public WriteStatistics() {
		trace.WriteLine();
		trace.WriteLine("{0} terminals", tab.terminals.Count);
		trace.WriteLine("{0} symbols", tab.terminals.Count + tab.pragmas.Count + tab.nonterminals.Count);
		trace.WriteLine("{0} nodes", tab.nodes.Count);
		trace.WriteLine("{0} sets", symSet.Count);
	}

	constructor (parser: Parser) {
		tab = parser.tab;
		errors = parser.errors;
		trace = parser.trace;
		buffer = parser.scanner.buffer;
		errorNr = -1;
		usingPos = null;
	}
} // end ParserGen

} // end namespace
