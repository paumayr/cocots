COMPILER Test

	public result : any;

CHARACTERS
	letter = 'A'..'Z' + 'a'..'z'.
	digit = '0'..'9'.

TOKENS
	ident = letter { letter | digit}.
	number = digit { digit }.
	plus = '+'.
	minus = '-'.
	mult = '*'.
	div = '/'.
	lesser = '<'.
	greater = '>'.
	equals = "==".

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO '\n'

IGNORE '\r' + '\n' + '\t'

PRODUCTIONS

AddOp<op : string;> =
	(					
		plus			(. ret.op = "plus"; .)
		|
		minus			(. ret.op = "minus"; .)
	).

MulOp<op : string;> = 
	(					
		mult			(. ret.op = "mult"; .)
		| 
		div				(. ret.op = "div"; .)
	).

RelOp<op : string;> = 
	(
		equals			(. ret.op = "equals"; .)
		| lesser		(. ret.op = "lesser"; .)
		| greater		(. ret.op = "greater"; .)
	).

Expr<expr : any;> =
		SimExpr<ret>
			[						(. var op = { op : "" }; var right = { expr : null }; .)
				RelOp<op> 
				SimExpr<right>		(. ret.expr = { left : ret.expr, op : op.op, right : right.expr }; .)
			].
Factor<expr : any;> =				
		(							(. var ident = { ident : "" }; .)
			Ident<ident>			(. ret.expr = { type: "ident", ident : ident.ident }; .)
		| number					(. ret.expr = { type: "number", number : parseFloat(this.t.val) }; .)
		|							(. var factor = { expr : null }; .)
			'-' Factor<factor>		(. ret.expr = { type: "negation", operand : factor.expr }; .)
		| "true"					(. ret.expr = { type: "boolean", value : true }; .)
		| "false"					(. ret.expr = { type: "boolean", value : false }; .)
		).

Ident<ident : string;> = ident		(. ret.ident = this.t.val; .).

SimExpr<expr : any;> =
		Term<ret>					
		{							(. var right = { expr : null }; var op = { op : "" }; .)
			AddOp<op>				
			Term<right>				(. ret.expr = { type : op.op, left : ret.expr, right : right.expr }; .)
		}.

Term<expr : any;> = 
	Factor<ret>
		{							(. var op = { op : "" }; var right = { expr : null }; .)
			MulOp<op>
			Factor<right>			(. ret.expr = { type: op.op, left : ret.expr, right : right.expr }; .)
		}.

Test =							(. var test = { expr : null }; .)
	Expr<test>					(. this.result = test.expr; .).

END Test.