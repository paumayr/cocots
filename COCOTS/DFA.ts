/*-------------------------------------------------------------------------
DFA.cs -- Generation of the Scanner Automaton
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/

module at.jku.ssw.Coco {

//-----------------------------------------------------------------------------
//  State
//-----------------------------------------------------------------------------
export class State {				// state of finite automaton
	public nr : number;						// state number
	public firstAction : Action;// to first action of this state
	public endOf: Symbol;			// recognized token if state is final
	public ctx: bool;					// true if state is reached via contextTrans
	public next: State;

	public AddAction(act: Action) {
		var lasta: Action = null;
		var a = firstAction;
		while (a != null && act.typ >= a.typ) { lasta = a; a = a.next; }
		// collecting classes at the beginning gives better performance
		act.next = a;
		if (a == firstAction) firstAction = act; else lasta.next = act;
	}

	public DetachAction(act: Action) {
		var lasta: Action = null;
		var a = firstAction;
		while (a != null && a != act) { lasta = a; a = a.next; }
		if (a != null) {
			if (a == firstAction) firstAction = a.next; else lasta.next = a.next;
		}
	}

	public MeltWith(s: State) { // copy actions of s to state
		for (var action: Action = s.firstAction; action != null; action = action.next) {
			var a = new Action(action.typ, action.sym, action.tc);
			a.AddTargets(action);
			AddAction(a);
		}
	}

}

//-----------------------------------------------------------------------------
//  Action
//-----------------------------------------------------------------------------

export class Action {			// action of finite automaton
	public typ : number;					// type of action symbol: clas, chr
	public sym : number;					// action symbol
	public tc : number;					// transition code: normalTrans, contextTrans
	public target: Target;		// states reached from this action
	public next: Action;

	constructor(typ : number, sym : number, tc : number) {
		this.typ = typ; this.sym = sym; this.tc = tc;
	}

	public AddTarget(t: Target) { // add t to the action.targets
		var last : Target = null;
		var p = target;
		while (p != null && t.state.nr >= p.state.nr) {
			if (t.state == p.state) return;
			last = p; p = p.next;
		}
		t.next = p;
		if (p == target) target = t; else last.next = t;
	}

	public AddTargets(a: Action) { // add copy of a.targets to action.targets
		for (var p = a.target; p != null; p = p.next) {
			var t = new Target(p.state);
			AddTarget(t);
		}
		if (a.tc == Node.contextTrans) tc = Node.contextTrans;
	}

	public Symbols(tab: Tab): CharSet {
		var s: CharSet;
		if (typ == Node.clas)
			s = tab.CharClassSet(sym).Clone();
		else {
			s = new CharSet(); s.Set(sym);
		}
		return s;
	}

	public ShiftWith(s: CharSet, tab: Tab) {
		if (s.Elements() == 1) {
			typ = Node.chr; sym = s.First();
		} else {
			var c = tab.FindCharClass(s);
			if (c == null) c = tab.NewCharClass("#", s); // class with dummy name
			typ = Node.clas; sym = c.n;
		}
	}
}

//-----------------------------------------------------------------------------
//  Target
//-----------------------------------------------------------------------------

export class Target {				// set of states that are reached by an action
	public state: State;				// target state
	public next: Target;

	constructor(s: State) {
			state = s;
	}
}

//-----------------------------------------------------------------------------
//  Melted
//-----------------------------------------------------------------------------

export class Melted {					// info about melted states
	public set: BitArray;				// set of old states
	public state: State;					// new state
	public next: Melted;

	constructor(set: BitArray, state: State) {
		this.set = set; this.state = state;
	}
}

//-----------------------------------------------------------------------------
//  Comment
//-----------------------------------------------------------------------------

export class Comment {					// info about comment syntax
	public start: string;
	public stop: string;
	public nested: bool;
	public next: Comment;

	constructor(start: string, stop: string, nested: bool) {
		this.start = start; this.stop = stop; this.nested = nested;
	}
}

//-----------------------------------------------------------------------------
//  CharSet
//-----------------------------------------------------------------------------

export class Range {
	public from: number;
	public to : number;
	public next: Range;
	constructor(from: number, to: number) {
		this.from = from;
		this.to = to;
	}
}

export class CharSet {
	public head: Range;

	public get (i : number): bool {
		for(var p = head; p != null; p = p.next)
			if(i < p.from) return false;
			else if (i <= p.to) return true; // p.from <= i <= p.to
		return false;
	}

	public Set(i : number) {
		var cur = head;
		var prev : Range = null;
		while (cur != null && i >= cur.from - 1) {
			if (i <= cur.to + 1) { // (cur.from-1) <= i <= (cur.to+1)
				if (i == cur.from - 1) {
					cur.from--;
				}
				else if (i == cur.to + 1) {
					cur.to++;
					var next = cur.next;
					if (next != null && cur.to == next.from - 1) { cur.to = next.to; cur.next = next.next; };
				}

				return;
			}
			prev = cur; cur = cur.next;
		}

		var n = new Range(i, i);
		n.next = cur;
		if (prev == null) {
			head = n;
		} else {
			prev.next = n;
		}
	}

	public Clone(): CharSet {
		var s = new CharSet();
		var prev: Range = null;
		for (var cur = head; cur != null; cur = cur.next) {
			var r = new Range(cur.from, cur.to);
			if (prev == null) {
				s.head = r;
			} else {
				prev.next = r;
			}

			prev = r;
		}
		return s;
	}

	public Equals(s: CharSet): bool {
		var p = head;
		var q = s.head;
		while (p != null && q != null) {
			if (p.from != q.from || p.to != q.to) return false;
			p = p.next; q = q.next;
		}
		return p == q;
	}

	public Elements() : number{
		var n = 0;
		for (var p = head; p != null; p = p.next) n += p.to -p.from +1;
		return n;
	}

	public First() : number {
		if (head != null) return head.from;
		return -1;
	}

	public Or(s: CharSet) {
		for (var p = s.head; p != null; p = p.next)
			for (var i = p.from; i <= p.to; i++) Set(i);
	}

	public And(s: CharSet) {
		var x = new CharSet();
		for (var p = head; p != null; p = p.next)
			for (var i = p.from; i <= p.to; i++)
				if (s.get(i)) x.Set(i);
		head = x.head;
	}

	public Subtract(s: CharSet) {
		var x = new CharSet();
		for (var p = head; p != null; p = p.next)
			for (var i = p.from; i <= p.to; i++)
				if (!s.get(i)) x.Set(i);
		head = x.head;
	}

	public Includes(s: CharSet): bool {
		for (var p = s.head; p != null; p = p.next)
			for (var i = p.from; i <= p.to; i++)
				if (!this.get(i)) return false;
		return true;
	}

	public Intersects(s: CharSet): bool {
		for (var p = s.head; p != null; p = p.next)
			for (var i = p.from; i <= p.to; i++)
				if (this.get(i)) return true;
		return false;
	}

	public Fill() {
		head = new Range(Char.MinValue, Char.MaxValue);
	}
}


//-----------------------------------------------------------------------------
//  Generator
//-----------------------------------------------------------------------------
export class Generator {
	private EOF : number = -1;

	private fram: FileStream;
	private gen: StreamWriter;
	private tab: Tab;
	private frameFile: string;

	constructor (tab: Tab) {
		this.tab = tab;
	}

	public OpenFrame(frame : string): FileStream {
		if (tab.frameDir != null) frameFile = Path.Combine(tab.frameDir, frame);
		if (frameFile == null || !File.Exists(frameFile)) frameFile = Path.Combine(tab.srcDir, frame);
		if (frameFile == null || !File.Exists(frameFile)) throw new FatalError("Cannot find : " + frame);

		try {
			fram = new FileStream(frameFile, FileMode.Open, FileAccess.Read, FileShare.Read);
		} catch (FileNotFoundException) {
			throw new FatalError("Cannot open frame file: " + frameFile);
		}
		return fram;
	}



	public OpenGen(target: string): StreamWriter {
		var fn = Path.Combine(tab.outDir, target);
		try {
			if (File.Exists(fn)) File.Copy(fn, fn + ".old", true);
			gen = new StreamWriter(new FileStream(fn, FileMode.Create)); /* pdt */
		} catch (IOException) {
			throw new FatalError("Cannot generate file: " + fn);
		}
		return gen;
	}


	public GenCopyright() {
		var copyFr: string = null;
		if (tab.frameDir != null) copyFr = Path.Combine(tab.frameDir, "Copyright.frame");
		if (copyFr == null || !File.Exists(copyFr)) copyFr = Path.Combine(tab.srcDir, "Copyright.frame");
		if (copyFr == null || !File.Exists(copyFr)) return;

		try {
			var scannerFram = fram;
			fram = new FileStream(copyFr, FileMode.Open, FileAccess.Read, FileShare.Read);
			CopyFramePart(null);
			fram = scannerFram;
		} catch (FileNotFoundException) {
			throw new FatalError("Cannot open Copyright.frame");
		}
	}

	public SkipFramePart(stop: String) {
		CopyFramePart(stop, false);
	}


	public CopyFramePart(stop: String) {
		CopyFramePart(stop, true);
	}

	// if stop == null, copies until end of file
	private CopyFramePart(stop: string, generateOutput: bool) {
		var startCh = '\0000';
		var endOfStopString = 0;

		if (stop != null) {
			startCh = stop[0];
			endOfStopString = stop.Length - 1;
		}

		var ch = framRead();
		while (ch != EOF) {
			if (stop != null && ch == startCh) {
				var i = 0;
				do {
					if (i == endOfStopString) return; // stop[0..i] found
					ch = framRead(); i++;
				} while (ch == stop[i]);
				// stop[0..i-1] found; continue with last read character
				if (generateOutput) gen.Write(stop.Substring(0, i));
			} else {
				if (generateOutput) gen.Write(ch);
				ch = framRead();
			}
		}

		if (stop != null) throw new FatalError("Incomplete or corrupt frame file: " + frameFile);
	}

	private framRead() : string {
		try {
			return fram.ReadCharacter();
		} catch (Exception) {
			throw new FatalError("Error reading frame file: " + frameFile);
		}
	}
}

//-----------------------------------------------------------------------------
//  DFA
//-----------------------------------------------------------------------------

export class DFA {
	private maxStates : number;
	private lastStateNr : number;   // highest state number
	private firstState: State;
	private lastState: State;   // last allocated state
	private lastSimState : number;  // last non melted state
	private fram: FileStream;   // scanner frame input
	private gen: StreamWriter;  // generated scanner file
	private curSy: Symbol;      // current token to be recognized (in FindTrans)
	private dirtyDFA: bool;     // DFA may become nondeterministic in MatchLiteral

	public ignoreCase: bool;   // true if input should be treated case-insensitively
	public hasCtxMoves: bool;  // DFA has context transitions

	// other Coco objects
	private parser: Parser;
	private tab: Tab;
	private errors: Errors;
	private trace: TextWriter;

	//---------- Output primitives
	private Ch(ch: string) : string {
		if (ch < ' ' || ch >= 127 || ch == '\'' || ch == '\\') {
			return string.Format("\"\\u{0:0000}\"", ch);
		}
			
		else return String.Format("'{0}'", ch);
	}

	private ChCond(ch : string) : string {
		return String.Format("this.ch == {0}", Ch(ch));
	}

	private PutRange(s: CharSet) {
		for (var r = s.head; r != null; r = r.next) {
			if (r.from == r.to) { gen.Write("this.ch == " + Ch(r.from)); }
			else if (r.from == 0) { gen.Write("this.ch <= " + Ch(r.to)); }
			else { gen.Write("this.ch >= " + Ch(r.from) + " && this.ch <= " + Ch(r.to)); }
			if (r.next != null) gen.Write(" || ");
		}
	}

	//---------- State handling

	NewState(): State {
		var s = new State(); s.nr = ++lastStateNr;
		if (firstState == null) firstState = s; else lastState.next = s;
		lastState = s;
		return s;
	}

	NewTransition(from: State, to: State, typ : number, sym : number, tc : number) {
		var t = new Target(to);
		var a = new Action(typ, sym, tc); a.target = t;
		from.AddAction(a);
		if (typ == Node.clas) curSy.tokenKind = Symbol.classToken;
	}

	CombineShifts() {
		var state: State;
		var a: Action;
		var b: Action;
		var c: Action;
		var seta: CharSet;
		var setb: CharSet;
		for (state = firstState; state != null; state = state.next) {
			for (a = state.firstAction; a != null; a = a.next) {
				b = a.next;
				while (b != null)
					if (a.target.state == b.target.state && a.tc == b.tc) {
						seta = a.Symbols(tab); setb = b.Symbols(tab);
						seta.Or(setb);
						a.ShiftWith(seta, tab);
						c = b; b = b.next; state.DetachAction(c);
					} else b = b.next;
			}
		}
	}

	FindUsedStates(state: State, used: BitArray) {
		if (used[state.nr]) return;
		used[state.nr] = true;
		for (var a = state.firstAction; a != null; a = a.next)
			FindUsedStates(a.target.state, used);
	}

	DeleteRedundantStates() {
		var newState = new State[lastStateNr + 1];
		var used = new BitArray(lastStateNr + 1);
		FindUsedStates(firstState, used);
		// combine equal final states
		for (var s1 = firstState.next; s1 != null; s1 = s1.next) // firstState cannot be final
			if (used[s1.nr] && s1.endOf != null && s1.firstAction == null && !s1.ctx)
				for (var s2 = s1.next; s2 != null; s2 = s2.next)
					if (used[s2.nr] && s1.endOf == s2.endOf && s2.firstAction == null & !s2.ctx) {
						used[s2.nr] = false; newState[s2.nr] = s1;
					}

		for (var state = firstState; state != null; state = state.next)
			if (used[state.nr])
				for (var a = state.firstAction; a != null; a = a.next)
					if (!used[a.target.state.nr])
						a.target.state = newState[a.target.state.nr];
		// delete unused states

		lastState = firstState; lastStateNr = 0; // firstState has number 0
		for (var state = firstState.next; state != null; state = state.next)
			if (used[state.nr]) { state.nr = ++lastStateNr; lastState = state; }
			else lastState.next = state.next;
	}

	TheState(p: Node): State  {
		var state: State;
		if (p == null) { state = NewState(); state.endOf = curSy; return state; }
		else return p.state;
	}

	Step(from: State, p: Node, stepped: BitArray) {
		if (p == null) return;
		stepped[p.n] = true;
		switch (p.typ) {
			case Node.clas: case Node.chr: {
				NewTransition(from, TheState(p.next), p.typ, p.val, p.code);
				break;
			}
			case Node.alt: {
				Step(from, p.sub, stepped); Step(from, p.down, stepped);
				break;
			}
			case Node.iter: {
				if (Tab.DelSubGraph(p.sub)) {
					parser.SemErr("contents of {...} must not be deletable");
					return;
				}
				if (p.next != null && !stepped[p.next.n]) Step(from, p.next, stepped);
				Step(from, p.sub, stepped);
				if (p.state != from) {
					Step(p.state, p, new BitArray(tab.nodes.Count));
				}
				break;
			}
			case Node.opt: {
				if (p.next != null && !stepped[p.next.n]) Step(from, p.next, stepped);
				Step(from, p.sub, stepped);
				break;
			}
		}
	}

	// Assigns a state n.state to every node n. There will be a transition from
	// n.state to n.next.state triggered by n.val. All nodes in an alternative
	// chain are represented by the same state.
	// Numbering scheme:
	//  - any node after a chr, clas, opt, or alt, must get a new number
	//  - if a nested structure starts with an iteration the iter node must get a new number
	//  - if an iteration follows an iteration, it must get a new number
	NumberNodes(p: Node, state: State, renumIter: bool) {
		if (p == null) return;
		if (p.state != null) return; // already visited;
		if (state == null || (p.typ == Node.iter && renumIter)) state = NewState();
		p.state = state;
		if (Tab.DelGraph(p)) state.endOf = curSy;
		switch (p.typ) {
			case Node.clas: case Node.chr: {
				NumberNodes(p.next, null, false);
				break;
			}
			case Node.opt: {
				NumberNodes(p.next, null, false);
				NumberNodes(p.sub, state, true);
				break;
			}
			case Node.iter: {
				NumberNodes(p.next, state, true);
				NumberNodes(p.sub, state, true);
				break;
			}
			case Node.alt: {
				NumberNodes(p.next, null, false);
				NumberNodes(p.sub, state, true);
				NumberNodes(p.down, state, renumIter);
				break;
			}
		}
	}

	FindTrans(p: Node, start: bool, marked: BitArray) {
		if (p == null || marked[p.n]) return;
		marked[p.n] = true;
		if (start) Step(p.state, p, new BitArray(tab.nodes.Count)); // start of group of equally numbered nodes
		switch (p.typ) {
			case Node.clas: case Node.chr: {
				FindTrans(p.next, true, marked);
				break;
			}
			case Node.opt: {
				FindTrans(p.next, true, marked); FindTrans(p.sub, false, marked);
				break;
			}
			case Node.iter: {
				FindTrans(p.next, false, marked); FindTrans(p.sub, false, marked);
				break;
			}
			case Node.alt: {
				FindTrans(p.sub, false, marked); FindTrans(p.down, false, marked);
				break;
			}
		}
	}

	public ConvertToStates(p: Node, sym: Symbol) {
		curSy = sym;
		if (Tab.DelGraph(p)) {
			parser.SemErr("token might be empty");
			return;
		}
		NumberNodes(p, firstState, true);
		FindTrans(p, true, new BitArray(tab.nodes.Count));
		if (p.typ == Node.iter) {
			Step(firstState, p, new BitArray(tab.nodes.Count));
		}
	}

	// match string against current automaton; store it either as a fixedToken or as a litToken
	public MatchLiteral(s: string, sym: Symbol) {
		s = tab.Unescape(s.Substring(1, s.Length - 2));
		var i: number;
		var len = s.Length;
		var state = firstState;
		var a: Action = null;
		for (i = 0; i < len; i++) { // try to match s against existing DFA
			a = FindAction(state, s[i]);
			if (a == null) break;
			state = a.target.state;
		}
		// if s was not totally consumed or leads to a non-final state => make new DFA from it
		if (i != len || state.endOf == null) {
			state = firstState; i = 0; a = null;
			dirtyDFA = true;
		}
		for (; i < len; i++) { // make new DFA for s[i..len-1], ML: i is either 0 or len
			var to = NewState();
			NewTransition(state, to, Node.chr, s[i], Node.normalTrans);
			state = to;
		}

		var matchedSym = state.endOf;
		if (state.endOf == null) {
			state.endOf = sym;
		} else if (matchedSym.tokenKind == Symbol.fixedToken || (a != null && a.tc == Node.contextTrans)) {
			// s matched a token with a fixed definition or a token with an appendix that will be cut off
			parser.SemErr("tokens " + sym.name + " and " + matchedSym.name + " cannot be distinguished");
		} else { // matchedSym == classToken || classLitToken
			matchedSym.tokenKind = Symbol.classLitToken;
			sym.tokenKind = Symbol.litToken;
		}
	}

	SplitActions(state: State, a: Action, b: Action) {
		var c: Action;
		var seta: CharSet;
		var setb: CharSet;
		var setc: CharSet;
		seta = a.Symbols(tab); setb = b.Symbols(tab);
		if (seta.Equals(setb)) {
			a.AddTargets(b);
			state.DetachAction(b);
		} else if (seta.Includes(setb)) {
			setc = seta.Clone(); setc.Subtract(setb);
			b.AddTargets(a);
			a.ShiftWith(setc, tab);
		} else if (setb.Includes(seta)) {
			setc = setb.Clone(); setc.Subtract(seta);
			a.AddTargets(b);
			b.ShiftWith(setc, tab);
		} else {
			setc = seta.Clone(); setc.And(setb);
			seta.Subtract(setc);
			setb.Subtract(setc);
			a.ShiftWith(seta, tab);
			b.ShiftWith(setb, tab);
			c = new Action(0, 0, Node.normalTrans);  // typ and sym are set in ShiftWith
			c.AddTargets(a);
			c.AddTargets(b);
			c.ShiftWith(setc, tab);
			state.AddAction(c);
		}
	}

	Overlap(a: Action, b: Action): bool  {
		var seta: CharSet;
		var setb: CharSet;
		if (a.typ == Node.chr)
			if (b.typ == Node.chr) return a.sym == b.sym;
			else { setb = tab.CharClassSet(b.sym); return setb[a.sym]; }
		else {
			seta = tab.CharClassSet(a.sym);
			if (b.typ == Node.chr) return seta[b.sym];
			else { setb = tab.CharClassSet(b.sym); return seta.Intersects(setb); }
		}
	}

	MakeUnique(state: State) {
		var changed: bool;
		do {
			changed = false;
			for (var a = state.firstAction; a != null; a = a.next)
			for (var b = a.next; b != null; b = b.next)
			if (Overlap(a, b)) { SplitActions(state, a, b); changed = true; }
		} while (changed);
	}

	MeltStates(state: State) {
		var ctx: bool;
		var targets: BitArray;
		var endOf: Symbol;
		for (var action = state.firstAction; action != null; action = action.next) {
			if (action.target.next != null) {
				GetTargetStates(action, out targets, out endOf, out ctx);
				var melt = StateWithSet(targets);
				if (melt == null) {
					var s = NewState(); s.endOf = endOf; s.ctx = ctx;
					for (var targ = action.target; targ != null; targ = targ.next)
						s.MeltWith(targ.state);
					MakeUnique(s);
					melt = NewMelted(targets, s);
				}
				action.target.next = null;
				action.target.state = melt.state;
			}
		}
	}

	FindCtxStates() {
		for (var state = firstState; state != null; state = state.next)
			for (var a = state.firstAction; a != null; a = a.next)
				if (a.tc == Node.contextTrans) a.target.state.ctx = true;
	}

	public MakeDeterministic() {
		var state: State;
		lastSimState = lastState.nr;
		maxStates = 2 * lastSimState; // heuristic for set size in Melted.set
		FindCtxStates();
		for (state = firstState; state != null; state = state.next)
			MakeUnique(state);
		for (state = firstState; state != null; state = state.next)
			MeltStates(state);
		DeleteRedundantStates();
		CombineShifts();
	}

	public PrintStates() {
		trace.WriteLine();
		trace.WriteLine("---------- states ----------");
		for (var state = firstState; state != null; state = state.next) {
			var first = true;
			if (state.endOf == null) trace.Write("               ");
			else trace.Write("E({0,12})", tab.Name(state.endOf.name));
			trace.Write("{0,3}:", state.nr);
			if (state.firstAction == null) trace.WriteLine();
			for (var action = state.firstAction; action != null; action = action.next) {
				if (first) { trace.Write(" "); first = false; } else trace.Write("                    ");
				if (action.typ == Node.clas) trace.Write(tab.classes[action.sym].name);
			else trace.Write("{0, 3}", Ch(action.sym));
				for (var targ = action.target; targ != null; targ = targ.next)
					trace.Write(" {0, 3}", targ.state.nr);
				if (action.tc == Node.contextTrans) trace.WriteLine(" context"); else trace.WriteLine();
			}
		}
		trace.WriteLine();
		trace.WriteLine("---------- character classes ----------");
		tab.WriteCharClasses();
	}

	//---------------------------- actions --------------------------------

	public FindAction(state: State, ch : string): Action  {
		for (var a = state.firstAction; a != null; a = a.next)
			if (a.typ == Node.chr && ch == a.sym) return a;
			else if (a.typ == Node.clas) {
				var s = tab.CharClassSet(a.sym);
				if (s[ch]) return a;
			}

		return null;
	}

	public GetTargetStates(a: Action): { targets: BitArray; endOf: Symbol; ctx: bool; } {
		// compute the set of target states
		var ret = { targets: BitArray = null, endOf: Symbol = null, ctx: bool = false };
		ret.targets = new BitArray(maxStates);

		for (var t = a.target; t != null; t = t.next) {
			var stateNr = t.state.nr;
			if (stateNr <= lastSimState) ret.targets[stateNr] = true;
			else targets.Or(MeltedSet(stateNr));
			if (t.state.endOf != null)
				if (endOf == null || endOf == t.state.endOf)
					ret.endOf = t.state.endOf;
				else
					errors.SemErr("Tokens " + endOf.name + " and " + t.state.endOf.name + " cannot be distinguished");
			if (t.state.ctx) {
				ret.ctx = true;
				// The following check seems to be unnecessary. It reported an error
				// if a symbol + context was the prefix of another symbol, e.g.
				//   s1 = "a" "b" "c".
				//   s2 = "a" CONTEXT("b").
				// But this is ok.
				// if (t.state.endOf != null) {
				//   Console.WriteLine("Ambiguous context clause");
				//	 errors.count++;
				// }
			}
		}
	}

	//------------------------- melted states ------------------------------

	firstMelted: Melted;	// head of melted state list

	NewMelted(set: BitArray, state: State) : Melted {
		var m = new Melted(set , state);
		m.next = firstMelted; firstMelted = m;
		return m;
	}

	MeltedSet(nr : number): BitArray  {
		var m = firstMelted;
		while (m != null) {
			if (m.state.nr == nr) return m.set; else m = m.next;
		}
		throw new FatalError("compiler error in Melted.Set");
	}

	StateWithSet(s: BitArray): Melted {
		for (var m = firstMelted; m != null; m = m.next)
		if (Sets.Equals(s, m.set )) return m;
		return null;
	}

	//------------------------ comments --------------------------------

	public firstComment: Comment;	// list of comments

	CommentStr(p: Node): string {
		var s = new StringBuilder();
		while (p != null) {
			if (p.typ == Node.chr) {
				s.Append(p.val);
			} else if (p.typ == Node.clas) {
				var set = tab.CharClassSet(p.val);
				if (set.Elements() != 1) parser.SemErr("character set contains more than 1 character");
				s.Append(set.First());
			} else parser.SemErr("comment delimiters may not be structured");
			p = p.next;
		}
		if (s.Length == 0 || s.Length > 2) {
			parser.SemErr("comment delimiters must be 1 or 2 characters long");
			s = new StringBuilder("?");
		}
		return s.ToString();
	}

	public NewComment(from: Node, to: Node, nested: bool) {
		var c = new Comment(CommentStr(from), CommentStr(to), nested);
		c.next = firstComment; firstComment = c;
	}


	//------------------------ scanner generation ----------------------
	GenComBody(com: Comment) {
		gen.WriteLine("\t\t\tfor(;;) {");
		gen.Write("\t\t\t\tif ({0}) ", ChCond(com.stop[0])); gen.WriteLine("{");
		if (com.stop.Length == 1) {
			gen.WriteLine("\t\t\t\t\tlevel--;");
			gen.WriteLine("\t\t\t\t\tif (level == 0) { this.oldEols = this.line - line0; this.NextCh(); return true; }");
			gen.WriteLine("\t\t\t\t\tthis.NextCh();");
		} else {
			gen.WriteLine("\t\t\t\t\tthis.NextCh();");
			gen.WriteLine("\t\t\t\t\tif ({0}) {{", ChCond(com.stop[1]));
			gen.WriteLine("\t\t\t\t\t\tlevel--;");
			gen.WriteLine("\t\t\t\t\t\tif (level == 0) { this.oldEols = this.line - line0; this.NextCh(); return true; }");
			gen.WriteLine("\t\t\t\t\t\tthis.NextCh();");
			gen.WriteLine("\t\t\t\t\t}");
		}
		if (com.nested) {
			gen.Write("\t\t\t\t}"); gen.Write(" else if ({0}) ", ChCond(com.start[0])); gen.WriteLine("{");
			if (com.start.Length == 1)
				gen.WriteLine("\t\t\t\t\tlevel++; this.NextCh();");
			else {
				gen.WriteLine("\t\t\t\t\tthis.NextCh();");
				gen.Write("\t\t\t\t\tif ({0}) ", ChCond(com.start[1])); gen.WriteLine("{");
				gen.WriteLine("\t\t\t\t\t\tlevel++; this.NextCh();");
				gen.WriteLine("\t\t\t\t\t}");
			}
		}
		gen.WriteLine("\t\t\t\t} else if (this.ch == Buffer.EOF) return false;");
		gen.WriteLine("\t\t\t\telse this.NextCh();");
		gen.WriteLine("\t\t\t}");
	}

	GenComment(com: Comment, i: int) {
		gen.WriteLine();
		gen.Write("\tComment{0}() : bool", i); gen.WriteLine("{");
		gen.WriteLine("\t\tvar level = 1; var pos0 = this.pos; var line0 = this.line; var col0 = this.col; var charPos0 = this.charPos;");
		if (com.start.Length == 1) {
			gen.WriteLine("\t\tthis.NextCh();");
			GenComBody(com);
		} else {
			gen.WriteLine("\t\tthis.NextCh();");
			gen.Write("\t\tif ({0}) ", ChCond(com.start[1])); gen.WriteLine("{");
			gen.WriteLine("\t\t\tthis.NextCh();");
			GenComBody(com);
			gen.WriteLine("\t\t} else {");
			gen.WriteLine("\t\t\tthis.buffer.Pos = pos0; this.NextCh(); this.line = line0; this.col = col0; this.charPos = charPos0;");
			gen.WriteLine("\t\t}");
			gen.WriteLine("\t\treturn false;");
		}
		gen.WriteLine("\t}");
	}

	SymName(sym: Symbol): string {
		if (Char.IsLetter(sym.name[0])) { // real name value is stored in Tab.literals
			foreach(var e in tab.literals)
			if (e.Value == sym) return (string) e.Key;
		}
		return sym.name;
	}

	GenLiterals() { 
		if (ignoreCase) {
			gen.WriteLine("\t\tswitch (this.t.val.ToLower()) {");
		} else {
			gen.WriteLine("\t\tswitch (this.t.val) {");
		}
		foreach(IList ts in new IList[]{ tab.terminals, tab.pragmas } ) {
			foreach(Symbol sym in ts) {
				if (sym.tokenKind == Symbol.litToken) {
					string name = SymName(sym);
					if (ignoreCase) name = name.ToLower();
					// sym.name stores literals with quotes, e.g. "\"Literal\""
					gen.WriteLine("\t\t\tcase {0}: this.t.kind = {1}; break;", name, sym.n);
				}
			}
		}
		gen.WriteLine("\t\t\tdefault: break;");
		gen.Write("\t\t}"); 
	}

	WriteState(state: State) {
		var endOf = state.endOf;
		gen.WriteLine("\t\t\tcase {0}:", state.nr);
		if (endOf != null && state.firstAction != null) {
			gen.WriteLine("\t\t\t\trecEnd = this.pos; recKind = {0};", endOf.n);
		}
		var ctxEnd = state.ctx;
		for (var action = state.firstAction; action != null; action = action.next) {
			if (action == state.firstAction) gen.Write("\t\t\t\tif (");
			else gen.Write("\t\t\t\telse if (");
			if (action.typ == Node.chr) gen.Write(ChCond(action.sym));
		else PutRange(tab.CharClassSet(action.sym));
			gen.Write(") {");
			if (action.tc == Node.contextTrans) {
				gen.Write("apx++; "); ctxEnd = false;
			} else if (state.ctx)
				gen.Write("apx = 0; ");
			gen.Write("this.AddCh(); state = {0}; done = false; break;", action.target.state.nr);
			gen.WriteLine("}");
		}
		if (state.firstAction == null)
			gen.Write("\t\t\t\t{");
		else
			gen.Write("\t\t\t\telse {");
		if (ctxEnd) { // final context state: cut appendix
			gen.WriteLine();
			gen.WriteLine("\t\t\t\t\ttlen -= apx;");
			gen.WriteLine("\t\t\t\t\tthis.SetScannerBehindT();");
			gen.Write("\t\t\t\t\t");
		}
		if (endOf == null) {
			gen.WriteLine("state = 0; done = false; break;}");
		} else {
			gen.Write("this.t.kind = {0}; ", endOf.n);
			if (endOf.tokenKind == Symbol.classLitToken) {
				gen.WriteLine("this.t.val = this.tval.join(\"\"); this.CheckLiteral(); return this.t;}");
			} else {
				gen.WriteLine("break;}");
			}
		}
	}

	WriteStartTab() {
		for (var action = firstState.firstAction; action != null; action = action.next) {
			var targetState = action.target.state.nr;
			if (action.typ == Node.chr) {
				var c = Char.ConvertFromUtf32(action.sym);
				gen.WriteLine("\t\tstart['" + c + "'] = " + targetState + "; ");
			} else {
				var s = tab.CharClassSet(action.sym);
				for (var r = s.head; r != null; r = r.next) {
					gen.WriteLine("\t\tfor (var i : number = " + r.from + "; i <= " + r.to + "; ++i) start[String.fromCharCode(i)] = " + targetState + ";");
				}
			}
		}
		gen.WriteLine("\t\tstart[Buffer.EOF] = -1;");
	}

	public WriteScanner() {
		var g = new Generator(tab);
		fram = g.OpenFrame("Scanner.frame");
		gen = g.OpenGen("Scanner.ts");
		if (dirtyDFA) MakeDeterministic();

		g.GenCopyright();
		g.SkipFramePart("-->begin");

		g.CopyFramePart("-->namespace");
		if (tab.nsName != null && tab.nsName.Length > 0) {
			gen.Write("module ");
			gen.Write(tab.nsName);
			gen.Write(" {");
		}
		g.CopyFramePart("-->declarations");
		gen.WriteLine("\tstatic maxT : number = {0};", tab.terminals.Count - 1);
		gen.WriteLine("\tstatic noSym : number = {0};", tab.noSym.n);
		if (ignoreCase)
			gen.Write("\tstatic valCh : string;       // current input character (for token.val)");
		g.CopyFramePart("-->initialization");
		WriteStartTab();
		g.CopyFramePart("-->casing1");
		if (ignoreCase) {
			gen.WriteLine("\t\tif (ch != Buffer.EOF) {");
			gen.WriteLine("\t\t\tvalCh = ch;");
			gen.WriteLine("\t\t\tch = ch.toLowerCase();");
			gen.WriteLine("\t\t}");
		}
		g.CopyFramePart("-->casing2");
		gen.Write("\t\t\tthis.tval.push(");
		if (ignoreCase) {
			gen.Write("this.valCh");
		}
		else {
			gen.Write("this.ch");
		}
		gen.WriteLine(");");

		g.CopyFramePart("-->comments");
		var com = firstComment;
		var comIdx = 0;
		while (com != null) {
			GenComment(com, comIdx);
			com = com.next; comIdx++;
		}
		g.CopyFramePart("-->literals"); GenLiterals();
		g.CopyFramePart("-->scan1");
		gen.Write("\t\t\t");
		if (tab.ignored.Elements() > 0) { PutRange(tab.ignored); } else { gen.Write("false"); }
		g.CopyFramePart("-->scan2");
		if (firstComment != null) {
			gen.Write("\t\tif (");
			com = firstComment; comIdx = 0;
			while (com != null) {
				gen.Write(ChCond(com.start[0]));
				gen.Write(" && this.Comment{0}()", comIdx);
				if (com.next != null) gen.Write(" ||");
				com = com.next; comIdx++;
			}
			gen.Write(") return this.NextToken();");
		}
		if (hasCtxMoves) { gen.WriteLine(); gen.Write("\t\tvar apx : number = 0;"); } /* pdt */
		g.CopyFramePart("-->scan3");
		for (var state = firstState.next; state != null; state = state.next)
			WriteState(state);
		g.CopyFramePart(null);
		if (tab.nsName != null && tab.nsName.Length > 0) gen.Write("}");
		gen.Close();
	}

	constructor(parser: Parser) {
		this.parser = parser;
		tab = parser.tab;
		errors = parser.errors;
		trace = parser.trace;
		firstState = null; lastState = null; lastStateNr = -1;
		firstState = NewState();
		firstMelted = null; firstComment = null;
		ignoreCase = false;
		dirtyDFA = false;
		hasCtxMoves = false;
	}
} // end DFA

} // end module
