/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
----------------------------------------------------------------------*/
-->begin

-->namespace

/// <reference path="Scanner.ts" />

export class Parser {
-->constants
	static T : bool = true;
	static x : bool = false;
	static minErrDist : number = 2;
	
	public scanner : Scanner;
	public errors : Errors;

	public t : Token;    // last recognized token
	public la : Token;   // lookahead token
	public errDist = Parser.minErrDist;

-->declarations

	public Parser(scanner : Scanner) 
	{
		this.scanner = scanner;
		this.errors = new Errors();
	}

	SynErr (n : number)
	{
		if (this.errDist >= Parser.minErrDist)
		{
			this.errors.SynErr(this.la.line, this.la.col, n);
		}

		this.errDist = 0;
	}

	SemErr (msg : string)
	{
		if (this.errDist >= Parser.minErrDist)
		{
			this.errors.SemErr(this.t.line, this.t.col, msg);
		}

		this.errDist = 0;
	}
	
	Get ()
	{
		for (;;)
		{
			this.t = this.la;
			this.la = this.scanner.Scan();
			if (this.la.kind <= Parser.maxT) 
			{ 
				this.errDist++; 
				break; 
			}
-->pragmas
			this.la = this.t;
		}
	}
	
	Expect (n : number) {
		if (this.la.kind == n)
		{
			this.Get(); 
		}
		else
		{ 
			this.SynErr(n);
		}
	}
	
	StartOf (s : number) : bool {
		return Parser.stateset[s][this.la.kind];
	}
	
	ExpectWeak (n : number, follow : number) {
		if (this.la.kind == n) this.Get();
		else {
			this.SynErr(n);
			while (!this.StartOf(follow)) this.Get();
		}
	}


	WeakSeparator(n : number, syFol : number, repFol : number) : bool {
		var kind = this.la.kind;
		if (kind == n) {this.Get(); return true;}
		else if (this.StartOf(repFol)) {return false;}
		else {
			this.SynErr(n);
			while (!(Parser.stateset[syFol, kind] || Parser.stateset[repFol, kind] || Parser.stateset[0, kind])) {
				this.Get();
				kind = this.la.kind;
			}
			return this.StartOf(syFol);
		}
	}

	
-->productions

	public Parse() {
		this.la = new Token();
		this.la.val = "";		
		this.Get();
-->parseRoot
	}
	
	static stateset : bool[][] = [
-->initialization
	];
} // end Parser


public class Errors {
	public count : number = 0;                                    // number of errors detected

	public SynErr (line : number, col : number, n : number) {
		var s : string;
		switch (n) {
-->errors
			default: s = "error " + n; break;
		}
		// TODO: write error errorStream.WriteLine(errMsgFormat, line, col, s);
		this.count++;
	}

	public virtual SemErr (line : number, col : number, s : string) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
		this.count++;
	}
	
	public SemErr (s : string) {
		errorStream.WriteLine(s);
		this.count++;
	}
	
	public Warning (line : number, col : number, s : string) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
	}
	
	public Warning(s : string) {
		errorStream.WriteLine(s);
	}
} // Errors


public class FatalError: Exception {
	public FatalError(string m): base(m) {}
}
