/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
----------------------------------------------------------------------*/
-->begin

-->namespace

public class Parser {
-->constants
	static T : bool = true;
	static x : bool = false;
	static minErrDist : number = 2;
	
	public scanner : Scanner;
	public errors : Errors;

	public t : Token;    // last recognized token
	public la : Token;   // lookahead token
	public errDist = minErrDist;

-->declarations

	public Parser(scanner : Scanner) {
		this.scanner = scanner;
		this.errors = new Errors();
	}

	SynErr (n : number) {
		if (errDist >= minErrDist) errors.SynErr(la.line, la.col, n);
		errDist = 0;
	}

	public void SemErr (msg : string) {
		if (errDist >= minErrDist) errors.SemErr(t.line, t.col, msg);
		errDist = 0;
	}
	
	Get () {
		for (;;) {
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT) { ++errDist; break; }
-->pragmas
			la = t;
		}
	}
	
	Expect (n : number) {
		if (la.kind == n) Get(); else { SynErr(n); }
	}
	
	StartOf (s : number) : bool {
		return set[s, la.kind];
	}
	
	void ExpectWeak (n : number, follow : number) {
		if (la.kind == n) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}


	WeakSeparator(n : number, syFol : number, repFol : number) : bool {
		int kind = la.kind;
		if (kind == n) {Get(); return true;}
		else if (StartOf(repFol)) {return false;}
		else {
			SynErr(n);
			while (!(set[syFol, kind] || set[repFol, kind] || set[0, kind])) {
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}

	
-->productions

	public Parse() {
		la = new Token();
		la.val = "";		
		Get();
-->parseRoot
	}
	
	static set : bool[][] = {
-->initialization
	};
} // end Parser


public class Errors {
	public count : number = 0;                                    // number of errors detected

	public SynErr (line : number, col : number, n : number) {
		var s : string;
		switch (n) {
-->errors
			default: s = "error " + n; break;
		}
		// TODO: write error errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}

	public virtual SemErr (line : number, col : number, s : string) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}
	
	public SemErr (s : string) {
		errorStream.WriteLine(s);
		count++;
	}
	
	public Warning (line : number, col : number, s : string) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
	}
	
	public Warning(s : string) {
		errorStream.WriteLine(s);
	}
} // Errors


public class FatalError: Exception {
	public FatalError(string m): base(m) {}
}
