/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/


namespace test {



public class Parser {
	public const int _EOF = 0;
	public const int _ident = 1;
	public const int _number = 2;
	public const int maxT = 12;

	static T : bool = true;
	static x : bool = false;
	static minErrDist : number = 2;
	
	public scanner : Scanner;
	public errors : Errors;

	public t : Token;    // last recognized token
	public la : Token;   // lookahead token
	public errDist = minErrDist;



	public Parser(scanner : Scanner) 
	{
		this.scanner = scanner;
		this.errors = new Errors();
	}

	SynErr (n : number)
	{
		if (errDist >= minErrDist)
		{
			errors.SynErr(la.line, la.col, n);
		}

		errDist = 0;
	}

	public void SemErr (msg : string)
	{
		if (errDist >= minErrDist)
		{
			errors.SemErr(t.line, t.col, msg);
		}

		errDist = 0;
	}
	
	Get ()
	{
		for (;;)
		{
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT) 
			{ 
				++errDist; 
				break; 
			}

			la = t;
		}
	}
	
	Expect (n : number) {
		if (la.kind == n)
		{
			this.Get(); 
		}
		else
		{ 
			this.SynErr(n);
		}
	}
	
	StartOf (s : number) : bool {
		return set[s, la.kind];
	}
	
	void ExpectWeak (n : number, follow : number) {
		if (la.kind == n) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}


	WeakSeparator(n : number, syFol : number, repFol : number) : bool {
		int kind = la.kind;
		if (kind == n) {Get(); return true;}
		else if (StartOf(repFol)) {return false;}
		else {
			SynErr(n);
			while (!(set[syFol, kind] || set[repFol, kind] || set[0, kind])) {
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}

	
	void AddOp() {
		if (la.kind == 3) {
			Get();
		} else if (la.kind == 4) {
			Get();
		} else SynErr(13);
	}

	void MulOp() {
		if (la.kind == 5) {
			Get();
		} else if (la.kind == 6) {
			Get();
		} else SynErr(14);
	}

	void RelOp() {
		if (la.kind == 7) {
			Get();
		} else if (la.kind == 8) {
			Get();
		} else if (la.kind == 9) {
			Get();
		} else SynErr(15);
	}

	void Expr() {
		SimExpr();
		if (la.kind == 7 || la.kind == 8 || la.kind == 9) {
			RelOp();
			SimExpr();
		}
	}

	void SimExpr() {
		Term();
		while (la.kind == 3 || la.kind == 4) {
			AddOp();
			Term();
		}
	}

	void Factor() {
		if (la.kind == 1) {
			Ident();
		} else if (la.kind == 2) {
			Get();
		} else if (la.kind == 4) {
			Get();
			Factor();
		} else if (la.kind == 10) {
			Get();
		} else if (la.kind == 11) {
			Get();
		} else SynErr(16);
	}

	void Ident() {
		Expect(1);
	}

	void Term() {
		Factor();
		while (la.kind == 5 || la.kind == 6) {
			MulOp();
			Factor();
		}
	}

	void Test() {
		Expr();
	}



	public Parse() {
		la = new Token();
		la.val = "";		
		Get();
		Test();
		Expect(0);

	}
	
	static set : bool[][] = {
		{T,x,x,x, x,x,x,x, x,x,x,x, x,x}

	};
} // end Parser


public class Errors {
	public count : number = 0;                                    // number of errors detected

	public SynErr (line : number, col : number, n : number) {
		var s : string;
		switch (n) {
			case 0: s = "EOF expected"; break;
			case 1: s = "ident expected"; break;
			case 2: s = "number expected"; break;
			case 3: s = "\"+\" expected"; break;
			case 4: s = "\"-\" expected"; break;
			case 5: s = "\"*\" expected"; break;
			case 6: s = "\"/\" expected"; break;
			case 7: s = "\"==\" expected"; break;
			case 8: s = "\"<\" expected"; break;
			case 9: s = "\">\" expected"; break;
			case 10: s = "\"true\" expected"; break;
			case 11: s = "\"false\" expected"; break;
			case 12: s = "??? expected"; break;
			case 13: s = "invalid AddOp"; break;
			case 14: s = "invalid MulOp"; break;
			case 15: s = "invalid RelOp"; break;
			case 16: s = "invalid Factor"; break;

			default: s = "error " + n; break;
		}
		// TODO: write error errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}

	public virtual SemErr (line : number, col : number, s : string) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
		count++;
	}
	
	public SemErr (s : string) {
		errorStream.WriteLine(s);
		count++;
	}
	
	public Warning (line : number, col : number, s : string) {
		errorStream.WriteLine(errMsgFormat, line, col, s);
	}
	
	public Warning(s : string) {
		errorStream.WriteLine(s);
	}
} // Errors


public class FatalError: Exception {
	public FatalError(string m): base(m) {}
}
}