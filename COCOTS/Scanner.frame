/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/
-->begin
-->namespace

export class Token {
	kind : number;    // token kind
	pos : number;     // token position in bytes in the source text (starting at 0)
	charPos : number;  // token position in characters in the source text (starting at 0)
	col : number;     // token column (starting at 1)
	line : number;    // token line (starting at 1)
	val : string;  // token value
	next : Token;  // ML 2005-03-11 Tokens are kept in linked list
}

//-----------------------------------------------------------------------------------
// Buffer
//-----------------------------------------------------------------------------------
public class Buffer {
	public static EOF : number = char.MaxValue + 1;
	public buf : string;         // input buffer
	public fileLen : number;
	public pos : number;

	public Buffer (s : string) {
		this.buf = s;
		this.fileLen = s.length;
		pos = 0;
	}

	public Read () : number {
		if (this.pos < fileLen)
		{
			return this.buf[this.pos++];
		}
		else
		{
			return EOF;
		}
	}

	public int Peek () {
		int curPos = Pos;
		int ch = Read();
		Pos = curPos;
		return ch;
	}
	
	// beg .. begin, zero-based, inclusive, in byte
	// end .. end, zero-based, exclusive, in byte
	public string GetString (int beg, int end) {
		return this.buf.substring(beg, end);
	}

	public int Pos {
		get { return this.pos}
		set { this.pos = value }
	}
}

//-----------------------------------------------------------------------------------
// Scanner
//-----------------------------------------------------------------------------------
export class Scanner {
	public static EOL : string = "\n";
	public static eofSym : number = 0;
-->declarations

	public buffer : Buffer; // scanner buffer
	
	t : Token;          // current token
	ch : number;           // current input character
	pos : number;          // byte position of current character
	charPos : number;      // position by unicode characters starting with 0
	col : number;          // column number of current character
	line : number;         // line number of current character
	oldEols : number;      // EOLs that appeared in a comment;
	static start : any; // maps first token character to start state

	tokens : Token;     // list of tokens already peeked (first token is a dummy)
	pt : Token;         // current peek token
	
	char[] tval = new char[128]; // text of current token
	int tlen;         // length of current token
	
	static Scanner() {
		start = {};
-->initialization
	}
	
	
	constructor(s : string) {
		this.buffer = new Buffer(s);
		Init();
	}
	
	Init() {
		this.pos = -1; this.line = 1; this.col = 0; this.charPos = -1;
		this.oldEols = 0;
		this.NextCh();
		pt = tokens = new Token();  // first token is a dummy
	}
	
	void NextCh() {
		if (oldEols > 0) { ch = EOL; oldEols--; } 
		else {
			this.pos = this.buffer.Pos;
			// buffer reads unicode chars, if UTF8 has been detected
			this.ch = this.buffer.Read(); col++; charPos++;
			// replace isolated '\r' by '\n' in order to make
			// eol handling uniform across Windows, Unix and Mac
			if (ch == "\r" && buffer.Peek() != "\n") this.ch = EOL;
			if (ch == EOL) { this.line++; this.col = 0; }
		}
-->casing1
	}

	void AddCh() {
		if (ch != Buffer.EOF) {
-->casing2
			NextCh();
		}
	}


-->comments

	void CheckLiteral() {
-->literals
	}

	Token NextToken() {
		while (ch == " " ||
-->scan1
		) NextCh();
-->scan2
		var recKind = noSym;
		var recEnd = pos;
		t = new Token();
		t.pos = pos; t.col = col; t.line = line; t.charPos = charPos;
		int state;
		if (start.ContainsKey(ch)) { state = start[ch]; }
		else { state = 0; }
		tlen = 0; this.AddCh();
		
		switch (state) {
			case -1: { t.kind = eofSym; break; } // NextCh already done
			case 0: {
				if (recKind != noSym) {
					tlen = recEnd - t.pos;
					SetScannerBehindT();
				}
				t.kind = recKind; break;
			} // NextCh already done
-->scan3
		}

		t.val = tval.substring(0, tlen);
		return t;
	}
	
	private void SetScannerBehindT() {
		buffer.Pos = t.pos;
		NextCh();
		line = t.line; col = t.col; charPos = t.charPos;
		for (int i = 0; i < tlen; i++) NextCh();
	}
	
	// get the next token (possibly a token already seen during peeking)
	public Token Scan () {
		if (tokens.next == null) {
			return NextToken();
		} else {
			pt = tokens = tokens.next;
			return tokens;
		}
	}

	// peek for the next token, ignore pragmas
	public Token Peek () {
		do {
			if (pt.next == null) {
				pt.next = NextToken();
			}
			pt = pt.next;
		} while (pt.kind > maxT); // skip pragmas
	
		return pt;
	}

	// make sure that peeking starts at the current scan position
	public void ResetPeek () { pt = tokens; }

} // end Scanner
